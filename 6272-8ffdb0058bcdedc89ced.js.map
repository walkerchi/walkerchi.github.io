{"version":3,"file":"6272-8ffdb0058bcdedc89ced.js","mappings":";uNAOA,IAA+BA,EAM3BC,GAN2BD,EAMN,GAAGE,OAFN,aAE8BA,OAD3B,eACsD,KALtE,MAAMA,OAAOF,EAAM,QAUxBG,EAAO,CACTC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEvBC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MACzCC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,MACNC,MAAO,QAETC,iBAAkB,CAAC,CACjBF,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,IACPE,MAAO,CAAC,SAAU,YACjB,CACDH,KAAM,MACNC,MAAO,MACPE,MAAO,CAAC,SAAU,aAEpBC,gBAAiB,gBACjBC,iBAAkB,CAChBC,sBAAuB,IAAIC,OAAO,8DAClCC,sBAAuB,IAAID,OAAO,4CAGlCE,EAAW,CACbC,aAAc,GACdC,aAAc,SACdb,SAAU,CAAC,CACTE,KAAM,IACNC,MAAO,IACPW,MAAO,mBACN,CACDZ,KAAM,IACNC,MAAO,IACPW,MAAO,oBACN,CACDZ,KAAM,IACNC,MAAO,IACPW,MAAO,0BAETC,QAAS,sBACTC,SAnEa,CAAC,cAAe,WAAY,SAAU,QAAS,MAAO,SAAU,MAAO,KAAM,KAAM,YAoEhGC,cAnEkB,CAAC,OAAQ,QAAS,QAoEpCC,QAAS,0CACTC,UAAW,CACTC,KAAM,CAAC,CACLC,QAAS,eACR,CACDA,QAAS,gBAEXC,eAAgB,CAAC,CACfC,MAAO,cACPC,OAAQ,CACNV,MAAO,WAER,CACDS,MAAO,MACPC,OAAQ,CACNV,MAAO,eACPW,KAAM,UAGVC,cAAe,CAAC,CACdH,MAAO,OACPC,OAAQ,CACNV,MAAO,oBACPW,KAAM,qBAEP,CACDF,MAAO,aACPC,OAAQ,CACNV,MAAO,WAER,CACDS,MAAO,WACPC,OAAQ,CACNV,MAAO,kBAER,CACDS,MAAO,QACPC,OAAQ,CACNV,MAAO,0BAER,CACDS,MAAO,IACPC,OAAQ,CACNV,MAAO,SACPW,KAAM,UAGVE,gBAAiB,CAAC,CAChBJ,MAAO,IACPC,OAAQ,CACNV,MAAO,oBACPW,KAAM,qBAEP,CACDF,MAAO,IACPC,OAAQ,CACNV,MAAO,oBACPW,KAAM,SAEP,CACDJ,QAAS,eAEXO,QAAS,CAAC,CACRL,MAAO,UACPC,OAAQ,CACNV,MAAO,YAER,CACDS,MAAO,SACPC,OAAQ,CACNV,MAAO,UACPW,KAAM,SAEP,CACDF,MAAO,SACPC,OAAQ,CACNV,MAAO,aAGXe,WAAY,CAAC,CACXN,MAnJa,gBAoJZ,CACDA,MAAO,SACPC,OAAQ,CACNV,MAAO,UACPW,KAAM,aAEP,CACDF,MAAO,YACPC,OAAQ,CACNV,MAAO,aAGXgB,WAAY,CAAC,CACXP,MAAO,MACPC,OAAQ,CACNV,MAAO,eACPW,KAAM,oBAEP,CACDF,MAAO,IACPC,OAAQ,CACNV,MAAO,eACPW,KAAM,mBAEP,CACDF,MA5Ke,SA6KfC,OAAQ,CACNV,MAAO,WAER,CACDS,MAAO7B,EACP8B,OAAQ,CACNO,MAAO,CACL,YAAa,CACXjB,MAAO,WAET,iBAAkB,CAChBA,MAAO,WAET,WAAY,CACVA,MAAO","sources":["webpack://gatsby-starter-hello-world/./node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/bicep/bicep.ts\nvar bounded = function bounded(text) {\n  return \"\\\\b\".concat(text, \"\\\\b\");\n};\n\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(\"\".concat(identifierStart).concat(identifierContinue, \"*\"));\nvar keywords = [\"targetScope\", \"resource\", \"module\", \"param\", \"var\", \"output\", \"for\", \"in\", \"if\", \"existing\"];\nvar namedLiterals = [\"true\", \"false\", \"null\"];\nvar nonCommentWs = \"[ \\\\t\\\\r\\\\n]\";\nvar numericLiteral = \"[0-9]+\";\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \"'''\",\n    close: \"'''\"\n  }],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"'''\",\n    close: \"'''\",\n    notIn: [\"string\", \"comment\"]\n  }],\n  autoCloseBefore: \":.,=}])' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".bicep\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords: keywords,\n  namedLiterals: namedLiterals,\n  escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\n  tokenizer: {\n    root: [{\n      include: \"@expression\"\n    }, {\n      include: \"@whitespace\"\n    }],\n    stringVerbatim: [{\n      regex: \"(|'|'')[^']\",\n      action: {\n        token: \"string\"\n      }\n    }, {\n      regex: \"'''\",\n      action: {\n        token: \"string.quote\",\n        next: \"@pop\"\n      }\n    }],\n    stringLiteral: [{\n      regex: \"\\\\${\",\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@bracketCounting\"\n      }\n    }, {\n      regex: \"[^\\\\\\\\'$]+\",\n      action: {\n        token: \"string\"\n      }\n    }, {\n      regex: \"@escapes\",\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: \"\\\\\\\\.\",\n      action: {\n        token: \"string.escape.invalid\"\n      }\n    }, {\n      regex: \"'\",\n      action: {\n        token: \"string\",\n        next: \"@pop\"\n      }\n    }],\n    bracketCounting: [{\n      regex: \"{\",\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@bracketCounting\"\n      }\n    }, {\n      regex: \"}\",\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@pop\"\n      }\n    }, {\n      include: \"expression\"\n    }],\n    comment: [{\n      regex: \"[^\\\\*]+\",\n      action: {\n        token: \"comment\"\n      }\n    }, {\n      regex: \"\\\\*\\\\/\",\n      action: {\n        token: \"comment\",\n        next: \"@pop\"\n      }\n    }, {\n      regex: \"[\\\\/*]\",\n      action: {\n        token: \"comment\"\n      }\n    }],\n    whitespace: [{\n      regex: nonCommentWs\n    }, {\n      regex: \"\\\\/\\\\*\",\n      action: {\n        token: \"comment\",\n        next: \"@comment\"\n      }\n    }, {\n      regex: \"\\\\/\\\\/.*$\",\n      action: {\n        token: \"comment\"\n      }\n    }],\n    expression: [{\n      regex: \"'''\",\n      action: {\n        token: \"string.quote\",\n        next: \"@stringVerbatim\"\n      }\n    }, {\n      regex: \"'\",\n      action: {\n        token: \"string.quote\",\n        next: \"@stringLiteral\"\n      }\n    }, {\n      regex: numericLiteral,\n      action: {\n        token: \"number\"\n      }\n    }, {\n      regex: identifier,\n      action: {\n        cases: {\n          \"@keywords\": {\n            token: \"keyword\"\n          },\n          \"@namedLiterals\": {\n            token: \"keyword\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }]\n  }\n};\nexport { conf, language };"],"names":["text","identifier","concat","conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","keywords","namedLiterals","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"sourceRoot":""}