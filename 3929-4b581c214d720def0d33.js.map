{"version":3,"file":"3929-4b581c214d720def0d33.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/ruby/ruby.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\",\n    blockComment: [\"=begin\", \"=end\"]\n  },\n  brackets: [[\"(\", \")\"], [\"{\", \"}\"], [\"[\", \"]\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\\\"|'|/).*\\\\4)*(#.*)?$\"),\n    decreaseIndentPattern: new RegExp(\"^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)\")\n  }\n};\nvar language = {\n  tokenPostfix: \".ruby\",\n  keywords: [\"__LINE__\", \"__ENCODING__\", \"__FILE__\", \"BEGIN\", \"END\", \"alias\", \"and\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\", \"elsif\", \"end\", \"ensure\", \"for\", \"false\", \"if\", \"in\", \"module\", \"next\", \"nil\", \"not\", \"or\", \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\", \"until\", \"when\", \"while\", \"yield\"],\n  keywordops: [\"::\", \"..\", \"...\", \"?\", \":\", \"=>\"],\n  builtins: [\"require\", \"public\", \"private\", \"include\", \"extend\", \"attr_reader\", \"protected\", \"private_class_method\", \"protected_class_method\", \"new\"],\n  declarations: [\"module\", \"class\", \"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  linedecls: [\"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  operators: [\"^\", \"&\", \"|\", \"<=>\", \"==\", \"===\", \"!~\", \"=~\", \">\", \">=\", \"<\", \"<=\", \"<<\", \">>\", \"+\", \"-\", \"*\", \"/\", \"%\", \"**\", \"~\", \"+@\", \"-@\", \"[]\", \"[]=\", \"`\", \"+=\", \"-=\", \"*=\", \"**=\", \"/=\", \"^=\", \"%=\", \"<<=\", \">>=\", \"&=\", \"&&=\", \"||=\", \"|=\"],\n  brackets: [{\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n  escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n  decpart: /\\d(_?\\d)*/,\n  decimal: /0|@decpart/,\n  delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n  heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n  tokenizer: {\n    root: [[/^(\\s*)([a-z_]\\w*[!?=]?)/, [\"white\", {\n      cases: {\n        \"for|until|while\": {\n          token: \"keyword.$2\",\n          next: \"@dodecl.$2\"\n        },\n        \"@declarations\": {\n          token: \"keyword.$2\",\n          next: \"@root.$2\"\n        },\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }]], [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        \"if|unless|while|until\": {\n          token: \"keyword.$0x\",\n          next: \"@modifier.$0x\"\n        },\n        for: {\n          token: \"keyword.$2\",\n          next: \"@dodecl.$2\"\n        },\n        \"@linedecls\": {\n          token: \"keyword.$0\",\n          next: \"@root.$0\"\n        },\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], [/[A-Z][\\w]*[!?=]?/, \"constructor.identifier\"], [/\\$[\\w]*/, \"global.constant\"], [/@[\\w]*/, \"namespace.instance.identifier\"], [/@@@[\\w]*/, \"namespace.class.identifier\"], [/<<[-~](@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }], [/[ \\t\\r\\n]+<<(@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }], [/^<<(@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }], {\n      include: \"@whitespace\"\n    }, [/\"/, {\n      token: \"string.d.delim\",\n      next: '@dstring.d.\"'\n    }], [/'/, {\n      token: \"string.sq.delim\",\n      next: \"@sstring.sq\"\n    }], [/%([rsqxwW]|Q?)/, {\n      token: \"@rematch\",\n      next: \"pstring\"\n    }], [/`/, {\n      token: \"string.x.delim\",\n      next: \"@dstring.x.`\"\n    }], [/:(\\w|[$@])\\w*[!?=]?/, \"string.s\"], [/:\"/, {\n      token: \"string.s.delim\",\n      next: '@dstring.s.\"'\n    }], [/:'/, {\n      token: \"string.s.delim\",\n      next: \"@sstring.s\"\n    }], [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, {\n      token: \"regexp.delim\",\n      next: \"@regexp\"\n    }], [/[{}()\\[\\]]/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@keywordops\": \"keyword\",\n        \"@operators\": \"operator\",\n        \"@default\": \"\"\n      }\n    }], [/[;,]/, \"delimiter\"], [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, \"number.hex\"], [/0[_oO][0-7](_?[0-7])*/, \"number.octal\"], [/0[bB][01](_?[01])*/, \"number.binary\"], [/0[dD]@decpart/, \"number\"], [/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, {\n      cases: {\n        $1: \"number.float\",\n        \"@default\": \"number\"\n      }\n    }]],\n    dodecl: [[/^/, {\n      token: \"\",\n      switchTo: \"@root.$S2\"\n    }], [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        do: {\n          token: \"keyword\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@linedecls\": {\n          token: \"@rematch\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@root\"\n    }],\n    modifier: [[/^/, \"\", \"@pop\"], [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        \"then|else|elsif|do\": {\n          token: \"keyword\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@linedecls\": {\n          token: \"@rematch\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@root\"\n    }],\n    sstring: [[/[^\\\\']+/, \"string.$S2\"], [/\\\\\\\\|\\\\'|\\\\$/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.invalid\"], [/'/, {\n      token: \"string.$S2.delim\",\n      next: \"@pop\"\n    }]],\n    dstring: [[/[^\\\\`\"#]+/, \"string.$S2\"], [/#/, \"string.$S2.escape\", \"@interpolated\"], [/\\\\$/, \"string.$S2.escape\"], [/@escapes/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.escape.invalid\"], [/[`\"]/, {\n      cases: {\n        \"$#==$S3\": {\n          token: \"string.$S2.delim\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string.$S2\"\n      }\n    }]],\n    heredoc: [[/^(\\s*)(@heredelim)$/, {\n      cases: {\n        \"$2==$S2\": [\"string.heredoc\", {\n          token: \"string.heredoc.delimiter\",\n          next: \"@pop\"\n        }],\n        \"@default\": [\"string.heredoc\", \"string.heredoc\"]\n      }\n    }], [/.*/, \"string.heredoc\"]],\n    interpolated: [[/\\$\\w*/, \"global.constant\", \"@pop\"], [/@\\w*/, \"namespace.class.identifier\", \"@pop\"], [/@@@\\w*/, \"namespace.instance.identifier\", \"@pop\"], [/[{]/, {\n      token: \"string.escape.curly\",\n      switchTo: \"@interpolated_compound\"\n    }], [\"\", \"\", \"@pop\"]],\n    interpolated_compound: [[/[}]/, {\n      token: \"string.escape.curly\",\n      next: \"@pop\"\n    }], {\n      include: \"@root\"\n    }],\n    pregexp: [{\n      include: \"@whitespace\"\n    }, [/[^\\(\\{\\[\\\\]/, {\n      cases: {\n        \"$#==$S3\": {\n          token: \"regexp.delim\",\n          next: \"@pop\"\n        },\n        \"$#==$S2\": {\n          token: \"regexp.delim\",\n          next: \"@push\"\n        },\n        \"~[)}\\\\]]\": \"@brackets.regexp.escape.control\",\n        \"~@regexpctl\": \"regexp.escape.control\",\n        \"@default\": \"regexp\"\n      }\n    }], {\n      include: \"@regexcontrol\"\n    }],\n    regexp: [{\n      include: \"@regexcontrol\"\n    }, [/[^\\\\\\/]/, \"regexp\"], [\"/[ixmp]*\", {\n      token: \"regexp.delim\"\n    }, \"@pop\"]],\n    regexcontrol: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\", \"@brackets.regexp.escape.control\"]], [/(\\[)(\\^?)/, [\"@brackets.regexp.escape.control\", {\n      token: \"regexp.escape.control\",\n      next: \"@regexrange\"\n    }]], [/(\\()(\\?[:=!])/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\"]], [/\\(\\?#/, {\n      token: \"regexp.escape.control\",\n      next: \"@regexpcomment\"\n    }], [/[()]/, \"@brackets.regexp.escape.control\"], [/@regexpctl/, \"regexp.escape.control\"], [/\\\\$/, \"regexp.escape\"], [/@regexpesc/, \"regexp.escape\"], [/\\\\\\./, \"regexp.invalid\"], [/#/, \"regexp.escape\", \"@interpolated\"]],\n    regexrange: [[/-/, \"regexp.escape.control\"], [/\\^/, \"regexp.invalid\"], [/\\\\$/, \"regexp.escape\"], [/@regexpesc/, \"regexp.escape\"], [/[^\\]]/, \"regexp\"], [/\\]/, \"@brackets.regexp.escape.control\", \"@pop\"]],\n    regexpcomment: [[/[^)]+/, \"comment\"], [/\\)/, {\n      token: \"regexp.escape.control\",\n      next: \"@pop\"\n    }]],\n    pstring: [[/%([qws])\\(/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.(.)\"\n    }], [/%([qws])\\[/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.[.]\"\n    }], [/%([qws])\\{/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.{.}\"\n    }], [/%([qws])</, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.<.>\"\n    }], [/%([qws])(@delim)/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.$2.$2\"\n    }], [/%r\\(/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.(.)\"\n    }], [/%r\\[/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.[.]\"\n    }], [/%r\\{/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.{.}\"\n    }], [/%r</, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.<.>\"\n    }], [/%r(@delim)/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.$1.$1\"\n    }], [/%(x|W|Q?)\\(/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.(.)\"\n    }], [/%(x|W|Q?)\\[/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.[.]\"\n    }], [/%(x|W|Q?)\\{/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.{.}\"\n    }], [/%(x|W|Q?)</, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.<.>\"\n    }], [/%(x|W|Q?)(@delim)/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.$2.$2\"\n    }], [/%([rqwsxW]|Q?)./, {\n      token: \"invalid\",\n      next: \"@pop\"\n    }], [/./, {\n      token: \"invalid\",\n      next: \"@pop\"\n    }]],\n    qstring: [[/\\\\$/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.escape\"], [/./, {\n      cases: {\n        \"$#==$S4\": {\n          token: \"string.$S2.delim\",\n          next: \"@pop\"\n        },\n        \"$#==$S3\": {\n          token: \"string.$S2.delim\",\n          next: \"@push\"\n        },\n        \"@default\": \"string.$S2\"\n      }\n    }]],\n    qqstring: [[/#/, \"string.$S2.escape\", \"@interpolated\"], {\n      include: \"@qstring\"\n    }],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/^\\s*=begin\\b/, \"comment\", \"@comment\"], [/#.*$/, \"comment\"]],\n    comment: [[/[^=]+/, \"comment\"], [/^\\s*=begin\\b/, \"comment.invalid\"], [/^\\s*=end\\b.*/, \"comment\", \"@pop\"], [/[=]/, \"comment\"]]\n  }\n};\nexport { conf, language };"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","tokenPostfix","keywords","keywordops","builtins","declarations","linedecls","operators","token","symbols","escape","escapes","decpart","decimal","delim","heredelim","regexpctl","regexpesc","tokenizer","root","cases","next","end","for","include","$1","dodecl","switchTo","do","modifier","sstring","dstring","heredoc","interpolated","interpolated_compound","pregexp","regexp","regexcontrol","regexrange","regexpcomment","pstring","qstring","qqstring","whitespace","comment"],"sourceRoot":""}