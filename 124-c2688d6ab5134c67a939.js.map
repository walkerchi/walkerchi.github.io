{"version":3,"file":"124-c2688d6ab5134c67a939.js","mappings":";sNAOA,IACIA,EAAO,CACTC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEvBC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MACrDC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,MAETC,iBAAkB,CAAC,CACjBF,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,IACPE,MAAO,CAAC,WACP,CACDH,KAAM,IACNC,MAAO,IACPE,MAAO,CAAC,YAEVC,gBAAiB,gBACjBC,iBAAkB,CAChBC,sBAAuB,IAAIC,OAAO,8DAClCC,sBAAuB,IAAID,OAAO,4CAGlCE,EAAW,CACbC,aAAc,GACdC,aAAc,SACdb,SAAU,CAAC,CACTE,KAAM,IACNC,MAAO,IACPW,MAAO,mBACN,CACDZ,KAAM,IACNC,MAAO,IACPW,MAAO,oBACN,CACDZ,KAAM,IACNC,MAAO,IACPW,MAAO,yBACN,CACDZ,KAAM,IACNC,MAAO,IACPW,MAAO,oBAETC,QAAS,sBACTC,SAAU,CAAC,SAAU,SAAU,OAAQ,SAAU,UAAW,SAAU,WAAY,QAAS,MAAO,WAAY,KAAM,MAAO,OAAQ,UAAW,UAAW,MAAO,SAAU,UAAW,UAAW,WAAY,OAAQ,SACpNC,aAAc,CAAC,SAAU,QAAS,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,UAAW,WAAY,WAAY,OAAQ,SAAU,SAC5JC,UAAW,CAAC,IAAK,IAAK,KACtBC,cA7EkB,CAAC,OAAQ,SA8E3BC,QAAS,0CACTC,WAAY,cACZC,eAAgB,sCAChBC,WAAY,oEACZC,YAAa,cACbC,SAAU,cACVC,YAAa,6CACbC,SAAU,0CACVC,SAAU,4EACVC,SAAU,wBACVC,QAAS,iBACTC,WAAY,cACZC,SAAU,UACVC,OAAQ,oBACRC,KAAM,kIACNC,QAAS,wFACTC,UAAW,CACTC,KAAM,CAAC,CACLC,QAAS,eACR,CAAC,SAAU,WAAY,CAAC,IAAK,aAAc,CAAC,IAAK,aAAc,CAAC,iBAAkB,CAAC,eAAgB,SAAU,CAC9GxB,MAAO,eACPyB,SAAU,sBACP,CAAC,iBAAkB,CAAC,eAAgB,SAAU,CACjDzB,MAAO,eACPyB,SAAU,sBACP,CAAC,MAAO,CACXzB,MAAO,GACPyB,SAAU,sBAEZC,SAAU,CAAC,CACTF,QAAS,eACR,CACDA,QAAS,aACR,CAAC,IAAK,aAAc,CAAC,OAAQ,aAAc,CAAC,kBAAmB,CAChEG,MAAO,CACLC,OAAQ,CACN5B,MAAO,UACP6B,KAAM,eAERC,KAAM,CACJ9B,MAAO,UACP6B,KAAM,iBAERE,QAAS,CACP/B,MAAO,UACP6B,KAAM,oBAERG,QAAS,CACPhC,MAAO,UACP6B,KAAM,oBAERI,OAAQ,CACNN,MAAO,CACL,cAAe,CACb3B,MAAO,UACP6B,KAAM,qBAIZ,YAAa,UACb,WAAY,iBAGhBK,SAAU,CAAC,CACTV,QAAS,eACR,CAAC,cAAe,mBAAoB,CAAC,IAAK,CAC3CxB,MAAO,YACPmC,QAAS,QACTV,SAAU,mBAEZW,SAAU,CAAC,CACTZ,QAAS,eACR,CACDA,QAAS,aACR,CAAC,IAAK,aAAc,CAAC,IAAK,aAAc,CAAC,WAAY,UAAW,eAAgB,CAAC,cAAe,cAAe,CAAC,KAAM,CACvHxB,MAAO,YACPmC,QAAS,QACTN,KAAM,iBACJ,CAAC,IAAK,CACR7B,MAAO,YACPmC,QAAS,SACTN,KAAM,UAERQ,YAAa,CAAC,CACZb,QAAS,eACR,CAAC,cAAe,mBAAoB,CAAC,IAAK,CAC3CxB,MAAO,YACPmC,QAAS,QACTV,SAAU,sBAEZa,YAAa,CAAC,CACZd,QAAS,eACR,CACDA,QAAS,aACR,CAAC,IAAK,aAAc,CAAC,IAAK,aAAc,CAAC,eAAgB,CAAC,UAAW,QAAS,CAC/ExB,MAAO,YACPmC,QAAS,QACTN,KAAM,cACH,CAAC,cAAe,CACnBF,MAAO,CACLC,OAAQ,CACN5B,MAAO,UACP6B,KAAM,eAERC,KAAM,CACJ9B,MAAO,UACP6B,KAAM,iBAERE,QAAS,CACP/B,MAAO,UACP6B,KAAM,oBAERU,MAAO,CACLvC,MAAO,UACP6B,KAAM,kBAERW,WAAY,CACVb,MAAO,CACL,cAAe,CACb3B,MAAO,UACP6B,KAAM,mBAIZY,SAAU,CACRzC,MAAO,UACP6B,KAAM,iBAER,wBAAyB,CACvB7B,MAAO,UACP6B,KAAM,cAERa,SAAU,CACRf,MAAO,CACL,cAAe,CACb3B,MAAO,UACP6B,KAAM,gBAIZ,cAAe,CACb7B,MAAO,WACP6B,KAAM,iBAGR,CAAC,KAAM,CACT7B,MAAO,YACPmC,QAAS,QACTN,KAAM,iBACJ,CAAC,IAAK,CACR7B,MAAO,YACPmC,QAAS,SACTN,KAAM,UAERc,WAAY,CAAC,CACXnB,QAAS,eACR,CAAC,cAAe,mBAAoB,CAAC,IAAK,CAC3CxB,MAAO,YACPmC,QAAS,QACTV,SAAU,qBAEZmB,WAAY,CAAC,CACXpB,QAAS,eACR,CACDA,QAAS,aACR,CAAC,IAAK,aAAc,CAAC,iCAAkC,UAAW,cAAe,CAAC,KAAM,CACzFxB,MAAO,YACPmC,QAAS,QACTN,KAAM,iBACJ,CAAC,IAAK,CACR7B,MAAO,YACPmC,QAAS,SACTN,KAAM,UAERgB,QAAS,CAAC,CACRrB,QAAS,eACR,CACDA,QAAS,aACR,CAAC,IAAK,aAAc,CAAC,cAAe,cAAe,CAAC,OAAQ,uBAAwB,CAAC,IAAK,YAAa,CAAC,KAAM,CAC/GxB,MAAO,YACPmC,QAAS,SACTN,KAAM,UAERD,OAAQ,CAAC,CACPJ,QAAS,eACR,CAAC,cAAe,cAAe,CAAC,OAAQ,uBAAwB,CAAC,IAAK,WAAY,SACrFsB,UAAW,CAAC,CACVtB,QAAS,eACR,CAAC,cAAe,cAAe,CAAC,IAAK,CACtCxB,MAAO,YACPmC,QAAS,QACTV,SAAU,oBAEZsB,UAAW,CAAC,CACVvB,QAAS,eACR,CACDA,QAAS,aACR,CAAC,IAAK,aAAc,CAAC,wBAAyB,CAAC,aAAc,QAAS,cAAe,CAAC,qBAAsB,CAC7GG,MAAO,CACL,gBAAiB,UACjB,WAAY,qBAEZ,CAAC,KAAM,CACT3B,MAAO,YACPmC,QAAS,QACTN,KAAM,iBACJ,CAAC,IAAK,CACR7B,MAAO,YACPmC,QAAS,SACTN,KAAM,UAERY,SAAU,CAAC,CACTjB,QAAS,eACR,CAAC,IAAK,aAAc,CAAC,IAAK,YAAa,QAAS,CACjDA,QAAS,aACR,CAAC,aAAc,YAClBwB,IAAK,CAAC,CACJxB,QAAS,eACR,CAAC,qBAAsB,CACxBG,MAAO,CACL,gBAAiB,UACjB,WAAY,qBAEZ,CAAC,IAAK,aAAc,CAAC,IAAK,CAC5B3B,MAAO,YACPmC,QAAS,SACTV,SAAU,gBAEZwB,MAAO,CAAC,CACNzB,QAAS,eACR,CAAC,QAAS,CACXG,MAAO,CACL,cAAe,CACb3B,MAAO,UACPyB,SAAU,qBAGZ,CAAC,wBAAyB,CAAC,aAAc,QAAS,CACpDzB,MAAO,YACP6B,KAAM,UACH,CAAC,qBAAsB,CAC1BF,MAAO,CACL,gBAAiB,UACjB,WAAY,sBAGhBuB,UAAW,CAAC,CACV1B,QAAS,eACR,CAAC,cAAe,cAAe,CAAC,IAAK,YAAa,CAAC,IAAK,CACzDxB,MAAO,YACPmC,QAAS,QACTV,SAAU,qBACR,CACFD,QAAS,cAEXJ,KAAM,CAAC,CACLI,QAAS,eACR,CAAC,cAAe,kBAAmB,QAAS,CAAC,IAAK,cACrDjB,WAAY,CAAC,CACXiB,QAAS,eACR,CAAC,cAAe,aAAc,SACjC2B,YAAa,CAAC,CACZ3B,QAAS,eACR,CAAC,cAAe,cAAe,CAAC,IAAK,CACtCxB,MAAO,YACPmC,QAAS,QACTV,SAAU,sBAEZ2B,YAAa,CAAC,CACZ5B,QAAS,eACR,CACDA,QAAS,aACR,CAAC,IAAK,aAAc,CAAC,WAAY,UAAW,eAAgB,CAAC,QAAS,UAAW,YAAa,CAAC,KAAM,CACtGxB,MAAO,YACPmC,QAAS,QACTN,KAAM,iBACJ,CAAC,IAAK,CACR7B,MAAO,YACPmC,QAAS,SACTN,KAAM,UAERwB,IAAK,CAAC,CACJ7B,QAAS,eACR,CAAC,cAAe,cAAe,CAAC,KAAM,CACvCxB,MAAO,YACPmC,QAAS,QACTV,SAAU,iBACR,CAAC,IAAK,CACRzB,MAAO,YACPmC,QAAS,QACTN,KAAM,uBACJ,CAAC,IAAK,YAAa,SACvByB,QAAS,CAAC,CACR9B,QAAS,eACR,CAAC,eAAgB,CAClBG,MAAO,CACL4B,OAAQ,CACNvD,MAAO,UACP6B,KAAM,aAER,WAAY,qBAEZ,CAAC,KAAM,CACT7B,MAAO,YACPmC,QAAS,SACTV,SAAU,kBAEZ+B,QAAS,CAAC,CACRhC,QAAS,eACR,CAAC,YAAa,WAAY,CAAC,KAAM,CAClCxB,MAAO,YACPmC,QAAS,QACTV,SAAU,mBAEZgC,SAAU,CAAC,CACTjC,QAAS,eACR,CAAC,eAAgB,CAClBG,MAAO,CACL4B,OAAQ,CACNvD,MAAO,UACP6B,KAAM,aAER,WAAY,qBAEZ,CAAC,KAAM,CACT7B,MAAO,YACPmC,QAAS,SACTV,SAAU,cAEZiC,cAAe,CAAC,CACdlC,QAAS,eACR,CACDA,QAAS,aACR,CAAC,IAAK,aAAc,CAAC,SAAU,WAAY,CAAC,cAAe,cAAe,CAAC,OAAQ,uBAAwB,CAAC,IAAK,YAAa,CAAC,IAAK,CACrIxB,MAAO,YACPmC,QAAS,SACTN,KAAM,UAER8B,QAAS,CAAC,CAAC,UAAW,WAAY,CAAC,OAAQ,UAAW,SAAU,CAAC,OAAQ,UAAW,QAAS,CAAC,QAAS,YACvGC,OAAQ,CAAC,CAAC,UAAW,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,IAAK,CACrG5D,MAAO,eACPmC,QAAS,SACTN,KAAM,UAERgC,aAAc,CAAC,CAAC,UAAW,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,IAAK,CAC3G7D,MAAO,eACPmC,QAAS,SACTN,KAAM,UAERiC,SAAU,CAAC,CAAC,WAAY,oBAAqB,CAAC,UAAW,cAAe,CAAC,YAAa,gBAAiB,CAAC,cAAe,UAAW,CAAC,YAAa,gBAAiB,CAAC,mCAAoC,kBAAmB,CAAC,IAAK,CAC7N9D,MAAO,eACPmC,QAAS,QACTN,KAAM,YACJ,CAAC,IAAK,CACR7B,MAAO,eACPmC,QAAS,QACTN,KAAM,kBACJ,CAAC,IAAK,CACR7B,MAAO,YACPmC,QAAS,QACTN,KAAM,eACJ,CAAC,aAAc,eACnBkC,WAAY,CAAC,CAAC,aAAc,SAAU,CAAC,OAAQ,UAAW,YAAa,CAAC,UAAW,YACnFC,UAAW,CAAC,CACVxC,QAAS,eACR,CACDA,QAAS,aACR,CAAC,cAAe,cAAe,CAAC,OAAQ,aAAc,CAAC,IAAK,CAC7DxB,MAAO,YACPmC,QAAS,SACTN,KAAM","sources":["webpack://gatsby-starter-hello-world/./node_modules/monaco-editor/esm/vs/basic-languages/protobuf/protobuf.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/protobuf/protobuf.ts\nvar namedLiterals = [\"true\", \"false\"];\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"], [\"<\", \">\"]],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\"]\n  }],\n  autoCloseBefore: \".,=}])>' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".proto\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords: [\"syntax\", \"import\", \"weak\", \"public\", \"package\", \"option\", \"repeated\", \"oneof\", \"map\", \"reserved\", \"to\", \"max\", \"enum\", \"message\", \"service\", \"rpc\", \"stream\", \"returns\", \"package\", \"optional\", \"true\", \"false\"],\n  builtinTypes: [\"double\", \"float\", \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\", \"bool\", \"string\", \"bytes\"],\n  operators: [\"=\", \"+\", \"-\"],\n  namedLiterals: namedLiterals,\n  escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\n  identifier: /[a-zA-Z]\\w*/,\n  fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n  optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n  messageName: /@identifier/,\n  enumName: /@identifier/,\n  messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n  enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n  floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n  exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n  boolLit: /true\\b|false\\b/,\n  decimalLit: /[1-9][0-9]*/,\n  octalLit: /0[0-7]*/,\n  hexLit: /0[xX][0-9a-fA-F]+/,\n  type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n  keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n  tokenizer: {\n    root: [{\n      include: \"@whitespace\"\n    }, [/syntax/, \"keyword\"], [/=/, \"operators\"], [/;/, \"delimiter\"], [/(\")(proto3)(\")/, [\"string.quote\", \"string\", {\n      token: \"string.quote\",\n      switchTo: \"@topLevel.proto3\"\n    }]], [/(\")(proto2)(\")/, [\"string.quote\", \"string\", {\n      token: \"string.quote\",\n      switchTo: \"@topLevel.proto2\"\n    }]], [/.*?/, {\n      token: \"\",\n      switchTo: \"@topLevel.proto2\"\n    }]],\n    topLevel: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/[;.]/, \"delimiter\"], [/@fullIdentifier/, {\n      cases: {\n        option: {\n          token: \"keyword\",\n          next: \"@option.$S2\"\n        },\n        enum: {\n          token: \"keyword\",\n          next: \"@enumDecl.$S2\"\n        },\n        message: {\n          token: \"keyword\",\n          next: \"@messageDecl.$S2\"\n        },\n        service: {\n          token: \"keyword\",\n          next: \"@serviceDecl.$S2\"\n        },\n        extend: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@extendDecl.$S2\"\n            }\n          }\n        },\n        \"@keywords\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }]],\n    enumDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@enumBody.$S2\"\n    }]],\n    enumBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/;/, \"delimiter\"], [/option\\b/, \"keyword\", \"@option.$S2\"], [/@identifier/, \"identifier\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    messageDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@messageBody.$S2\"\n    }]],\n    messageBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/;/, \"delimiter\"], [\"(map)(s*)(<)\", [\"keyword\", \"white\", {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@map.$S2\"\n    }]], [/@identifier/, {\n      cases: {\n        option: {\n          token: \"keyword\",\n          next: \"@option.$S2\"\n        },\n        enum: {\n          token: \"keyword\",\n          next: \"@enumDecl.$S2\"\n        },\n        message: {\n          token: \"keyword\",\n          next: \"@messageDecl.$S2\"\n        },\n        oneof: {\n          token: \"keyword\",\n          next: \"@oneofDecl.$S2\"\n        },\n        extensions: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@reserved.$S2\"\n            }\n          }\n        },\n        reserved: {\n          token: \"keyword\",\n          next: \"@reserved.$S2\"\n        },\n        \"(?:repeated|optional)\": {\n          token: \"keyword\",\n          next: \"@field.$S2\"\n        },\n        required: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@field.$S2\"\n            }\n          }\n        },\n        \"$S2==proto3\": {\n          token: \"@rematch\",\n          next: \"@field.$S2\"\n        }\n      }\n    }], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    extendDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@extendBody.$S2\"\n    }]],\n    extendBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/(?:repeated|optional|required)/, \"keyword\", \"@field.$S2\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    options: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\"], [/\\]/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    option: [{\n      include: \"@whitespace\"\n    }, [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\", \"@pop\"]],\n    oneofDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@oneofBody.$S2\"\n    }]],\n    oneofBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", \"delimiter\"]], [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    reserved: [{\n      include: \"@whitespace\"\n    }, [/,/, \"delimiter\"], [/;/, \"delimiter\", \"@pop\"], {\n      include: \"@constant\"\n    }, [/to\\b|max\\b/, \"keyword\"]],\n    map: [{\n      include: \"@whitespace\"\n    }, [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }], [/,/, \"delimiter\"], [/>/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"identifier\"\n    }]],\n    field: [{\n      include: \"@whitespace\"\n    }, [\"group\", {\n      cases: {\n        \"$S2==proto2\": {\n          token: \"keyword\",\n          switchTo: \"@groupDecl.$S2\"\n        }\n      }\n    }], [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", {\n      token: \"delimiter\",\n      next: \"@pop\"\n    }]], [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }]],\n    groupDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [\"=\", \"operator\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@messageBody.$S2\"\n    }], {\n      include: \"@constant\"\n    }],\n    type: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\", \"@pop\"], [/./, \"delimiter\"]],\n    identifier: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\", \"@pop\"]],\n    serviceDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@serviceBody.$S2\"\n    }]],\n    serviceBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/option\\b/, \"keyword\", \"@option.$S2\"], [/rpc\\b/, \"keyword\", \"@rpc.$S2\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    rpc: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/\\(/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@request.$S2\"\n    }], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@methodOptions.$S2\"\n    }], [/;/, \"delimiter\", \"@pop\"]],\n    request: [{\n      include: \"@whitespace\"\n    }, [/@messageType/, {\n      cases: {\n        stream: {\n          token: \"keyword\",\n          next: \"@type.$S2\"\n        },\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\)/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"@returns.$S2\"\n    }]],\n    returns: [{\n      include: \"@whitespace\"\n    }, [/returns\\b/, \"keyword\"], [/\\(/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@response.$S2\"\n    }]],\n    response: [{\n      include: \"@whitespace\"\n    }, [/@messageType/, {\n      cases: {\n        stream: {\n          token: \"keyword\",\n          next: \"@type.$S2\"\n        },\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\)/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"@rpc.$S2\"\n    }]],\n    methodOptions: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [\"option\", \"keyword\"], [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\"], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\/\\*/, \"comment\", \"@push\"], [\"\\\\*/\", \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    stringSingle: [[/[^\\\\']+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/'/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    constant: [[\"@boolLit\", \"keyword.constant\"], [\"@hexLit\", \"number.hex\"], [\"@octalLit\", \"number.octal\"], [\"@decimalLit\", \"number\"], [\"@floatLit\", \"number.float\"], [/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, \"string.invalid\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@string\"\n    }], [/'/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@stringSingle\"\n    }], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@prototext\"\n    }], [/identifier/, \"identifier\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]],\n    prototext: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/@identifier/, \"identifier\"], [/[:;]/, \"delimiter\"], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]]\n  }\n};\nexport { conf, language };"],"names":["conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","keywords","builtinTypes","operators","namedLiterals","escapes","identifier","fullIdentifier","optionName","messageName","enumName","messageType","enumType","floatLit","exponent","boolLit","decimalLit","octalLit","hexLit","type","keyType","tokenizer","root","include","switchTo","topLevel","cases","option","next","enum","message","service","extend","enumDecl","bracket","enumBody","messageDecl","messageBody","oneof","extensions","reserved","required","extendDecl","extendBody","options","oneofDecl","oneofBody","map","field","groupDecl","serviceDecl","serviceBody","rpc","request","stream","returns","response","methodOptions","comment","string","stringSingle","constant","whitespace","prototext"],"sourceRoot":""}