{"version":3,"file":"6877-999288992ff0da36d7b5.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./node_modules/monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/coffee/coffee.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    blockComment: [\"###\", \"###\"],\n    lineComment: \"#\"\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  ignoreCase: true,\n  tokenPostfix: \".coffee\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }],\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n  keywords: [\"and\", \"or\", \"is\", \"isnt\", \"not\", \"on\", \"yes\", \"@\", \"no\", \"off\", \"true\", \"false\", \"null\", \"this\", \"new\", \"delete\", \"typeof\", \"in\", \"instanceof\", \"return\", \"throw\", \"break\", \"continue\", \"debugger\", \"if\", \"else\", \"switch\", \"for\", \"while\", \"do\", \"try\", \"catch\", \"finally\", \"class\", \"extends\", \"super\", \"undefined\", \"then\", \"unless\", \"until\", \"loop\", \"of\", \"by\", \"when\"],\n  symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [[/\\@[a-zA-Z_]\\w*/, \"variable.predefined\"], [/[a-zA-Z_]\\w*/, {\n      cases: {\n        this: \"variable.predefined\",\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"\"\n      }\n    }], [/[ \\t\\r\\n]+/, \"\"], [/###/, \"comment\", \"@comment\"], [/#.*$/, \"comment\"], [\"///\", {\n      token: \"regexp\",\n      next: \"@hereregexp\"\n    }], [/^(\\s*)(@regEx)/, [\"\", \"regexp\"]], [/(\\()(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]], [/(\\,)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\=)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\:)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\[)(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]], [/(\\!)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\&)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\|)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\?)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]], [/(\\{)(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]], [/(\\;)(\\s*)(@regEx)/, [\"\", \"\", \"regexp\"]], [/}/, {\n      cases: {\n        \"$S2==interpolatedstring\": {\n          token: \"string\",\n          next: \"@pop\"\n        },\n        \"@default\": \"@brackets\"\n      }\n    }], [/[{}()\\[\\]]/, \"@brackets\"], [/@symbols/, \"delimiter\"], [/\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"], [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/0[xX][0-9a-fA-F]+/, \"number.hex\"], [/0[0-7]+(?!\\d)/, \"number.octal\"], [/\\d+/, \"number\"], [/[,.]/, \"delimiter\"], [/\"\"\"/, \"string\", '@herestring.\"\"\"'], [/'''/, \"string\", \"@herestring.'''\"], [/\"/, {\n      cases: {\n        \"@eos\": \"string\",\n        \"@default\": {\n          token: \"string\",\n          next: '@string.\"'\n        }\n      }\n    }], [/'/, {\n      cases: {\n        \"@eos\": \"string\",\n        \"@default\": {\n          token: \"string\",\n          next: \"@string.'\"\n        }\n      }\n    }]],\n    string: [[/[^\"'\\#\\\\]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\./, \"string.escape.invalid\"], [/\\./, \"string.escape.invalid\"], [/#{/, {\n      cases: {\n        '$S2==\"': {\n          token: \"string\",\n          next: \"root.interpolatedstring\"\n        },\n        \"@default\": \"string\"\n      }\n    }], [/[\"']/, {\n      cases: {\n        \"$#==$S2\": {\n          token: \"string\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }], [/#/, \"string\"]],\n    herestring: [[/(\"\"\"|''')/, {\n      cases: {\n        \"$1==$S2\": {\n          token: \"string\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }], [/[^#\\\\'\"]+/, \"string\"], [/['\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\./, \"string.escape.invalid\"], [/#{/, {\n      token: \"string.quote\",\n      next: \"root.interpolatedstring\"\n    }], [/#/, \"string\"]],\n    comment: [[/[^#]+/, \"comment\"], [/###/, \"comment\", \"@pop\"], [/#/, \"comment\"]],\n    hereregexp: [[/[^\\\\\\/#]+/, \"regexp\"], [/\\\\./, \"regexp\"], [/#.*$/, \"comment\"], [\"///[igm]*\", {\n      token: \"regexp\",\n      next: \"@pop\"\n    }], [/\\//, \"regexp\"]]\n  }\n};\nexport { conf, language };"],"names":["conf","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","ignoreCase","tokenPostfix","token","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","next","string","herestring","comment","hereregexp"],"sourceRoot":""}