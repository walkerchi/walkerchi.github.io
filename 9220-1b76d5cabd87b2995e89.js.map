{"version":3,"file":"9220-1b76d5cabd87b2995e89.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./node_modules/monaco-editor/esm/vs/basic-languages/rust/rust.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/rust/rust.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".rust\",\n  defaultToken: \"invalid\",\n  keywords: [\"as\", \"async\", \"await\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"dyn\", \"else\", \"enum\", \"extern\", \"false\", \"fn\", \"for\", \"if\", \"impl\", \"in\", \"let\", \"loop\", \"match\", \"mod\", \"move\", \"mut\", \"pub\", \"ref\", \"return\", \"self\", \"static\", \"struct\", \"super\", \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"catch\", \"default\", \"union\", \"static\", \"abstract\", \"alignof\", \"become\", \"do\", \"final\", \"macro\", \"offsetof\", \"override\", \"priv\", \"proc\", \"pure\", \"sizeof\", \"typeof\", \"unsized\", \"virtual\", \"yield\"],\n  typeKeywords: [\"Self\", \"m32\", \"m64\", \"m128\", \"f80\", \"f16\", \"f128\", \"int\", \"uint\", \"float\", \"char\", \"bool\", \"u8\", \"u16\", \"u32\", \"u64\", \"f32\", \"f64\", \"i8\", \"i16\", \"i32\", \"i64\", \"str\", \"Option\", \"Either\", \"c_float\", \"c_double\", \"c_void\", \"FILE\", \"fpos_t\", \"DIR\", \"dirent\", \"c_char\", \"c_schar\", \"c_uchar\", \"c_short\", \"c_ushort\", \"c_int\", \"c_uint\", \"c_long\", \"c_ulong\", \"size_t\", \"ptrdiff_t\", \"clock_t\", \"time_t\", \"c_longlong\", \"c_ulonglong\", \"intptr_t\", \"uintptr_t\", \"off_t\", \"dev_t\", \"ino_t\", \"pid_t\", \"mode_t\", \"ssize_t\"],\n  constants: [\"true\", \"false\", \"Some\", \"None\", \"Left\", \"Right\", \"Ok\", \"Err\"],\n  supportConstants: [\"EXIT_FAILURE\", \"EXIT_SUCCESS\", \"RAND_MAX\", \"EOF\", \"SEEK_SET\", \"SEEK_CUR\", \"SEEK_END\", \"_IOFBF\", \"_IONBF\", \"_IOLBF\", \"BUFSIZ\", \"FOPEN_MAX\", \"FILENAME_MAX\", \"L_tmpnam\", \"TMP_MAX\", \"O_RDONLY\", \"O_WRONLY\", \"O_RDWR\", \"O_APPEND\", \"O_CREAT\", \"O_EXCL\", \"O_TRUNC\", \"S_IFIFO\", \"S_IFCHR\", \"S_IFBLK\", \"S_IFDIR\", \"S_IFREG\", \"S_IFMT\", \"S_IEXEC\", \"S_IWRITE\", \"S_IREAD\", \"S_IRWXU\", \"S_IXUSR\", \"S_IWUSR\", \"S_IRUSR\", \"F_OK\", \"R_OK\", \"W_OK\", \"X_OK\", \"STDIN_FILENO\", \"STDOUT_FILENO\", \"STDERR_FILENO\"],\n  supportMacros: [\"format!\", \"print!\", \"println!\", \"panic!\", \"format_args!\", \"unreachable!\", \"write!\", \"writeln!\"],\n  operators: [\"!\", \"!=\", \"%\", \"%=\", \"&\", \"&=\", \"&&\", \"*\", \"*=\", \"+\", \"+=\", \"-\", \"-=\", \"->\", \".\", \"..\", \"...\", \"/\", \"/=\", \":\", \";\", \"<<\", \"<<=\", \"<\", \"<=\", \"=\", \"==\", \"=>\", \">\", \">=\", \">>\", \">>=\", \"@\", \"^\", \"^=\", \"|\", \"|=\", \"||\", \"_\", \"?\", \"#\"],\n  escapes: /\\\\([nrt0\\\"''\\\\]|x\\h{2}|u\\{\\h{1,6}\\})/,\n  delimiters: /[,]/,\n  symbols: /[\\#\\!\\%\\&\\*\\+\\-\\.\\/\\:\\;\\<\\=\\>\\@\\^\\|_\\?]+/,\n  intSuffixes: /[iu](8|16|32|64|128|size)/,\n  floatSuffixes: /f(32|64)/,\n  tokenizer: {\n    root: [[/r(#*)\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@stringraw.$1\"\n    }], [/[a-zA-Z][a-zA-Z0-9_]*!?|_[a-zA-Z0-9_]+/, {\n      cases: {\n        \"@typeKeywords\": \"keyword.type\",\n        \"@keywords\": \"keyword\",\n        \"@supportConstants\": \"keyword\",\n        \"@supportMacros\": \"keyword\",\n        \"@constants\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }], [/\\$/, \"identifier\"], [/'[a-zA-Z_][a-zA-Z0-9_]*(?=[^\\'])/, \"identifier\"], [/'(\\S|@escapes)'/, \"string.byteliteral\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@string\"\n    }], {\n      include: \"@numbers\"\n    }, {\n      include: \"@whitespace\"\n    }, [/@delimiters/, {\n      cases: {\n        \"@keywords\": \"keyword\",\n        \"@default\": \"delimiter\"\n      }\n    }], [/[{}()\\[\\]<>]/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"operator\",\n        \"@default\": \"\"\n      }\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\/\\*/, \"comment\", \"@push\"], [\"\\\\*/\", \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    stringraw: [[/[^\"#]+/, {\n      token: \"string\"\n    }], [/\"(#*)/, {\n      cases: {\n        \"$1==$S2\": {\n          token: \"string.quote\",\n          bracket: \"@close\",\n          next: \"@pop\"\n        },\n        \"@default\": {\n          token: \"string\"\n        }\n      }\n    }], [/[\"#]/, {\n      token: \"string\"\n    }]],\n    numbers: [[/(0o[0-7_]+)(@intSuffixes)?/, {\n      token: \"number\"\n    }], [/(0b[0-1_]+)(@intSuffixes)?/, {\n      token: \"number\"\n    }], [/[\\d][\\d_]*(\\.[\\d][\\d_]*)?[eE][+-][\\d_]+(@floatSuffixes)?/, {\n      token: \"number\"\n    }], [/\\b(\\d\\.?[\\d_]*)(@floatSuffixes)?\\b/, {\n      token: \"number\"\n    }], [/(0x[\\da-fA-F]+)_?(@intSuffixes)?/, {\n      token: \"number\"\n    }], [/[\\d][\\d_]*(@intSuffixes?)?/, {\n      token: \"number\"\n    }]]\n  }\n};\nexport { conf, language };"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","tokenPostfix","defaultToken","keywords","typeKeywords","constants","supportConstants","supportMacros","operators","escapes","delimiters","symbols","intSuffixes","floatSuffixes","tokenizer","root","token","bracket","next","cases","include","whitespace","comment","string","stringraw","numbers"],"sourceRoot":""}