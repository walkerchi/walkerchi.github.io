{"version":3,"file":"component---src-templates-blog-template-blog-template-jsx-62a1f3c96fd6a5ccfab6.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/components/MarkdownStaticRender/MarkdownStaticRender.jsx","webpack://gatsby-starter-hello-world/./src/templates/BlogTemplate/BlogTemplate.jsx"],"sourcesContent":["import React,{useEffect,useRef,useState} from 'react';\r\nimport './markdownStaticRender.css';\r\nimport '../../styles/markdownStyle.css';\r\n// import 'github-markdown-css/github-markdown.css'\r\n// import '../../styles/mathjaxConfig.css';\r\n// import './mathjax-config';\r\nimport \"mathjax/es5/tex-svg\";\r\n// import mermaid from 'mermaid';\r\nimport MarkdownIt from 'markdown-it';\r\nimport 'highlight.js/styles/docco.css'\r\nimport 'reveal.js/dist/reveal.css';\r\nimport 'reveal.js/dist/theme/black.css';\r\nimport mermaid from \"mermaid\";\r\n\r\nmermaid.initialize({ startOnLoad: true });\r\n// import 'katex/dist/katex.min.css'\r\n\r\n// import Markdown from 'reveal.js/plugin/markdown/markdown.esm.js';\r\n/*\r\n    support \r\n        mathjax(latex)  yes\r\n        mermaid         yes\r\n        code-highlight  yes\r\n        emoj            yes\r\n        ppt             yes\r\n*/\r\n\r\n// mermaid.initialize({startOnLoad:true});\r\n\r\n\r\n\r\n\r\n\r\nexport default function MarkdownRender({source,hasToc,isPPT,isStatic}) {\r\n    // console.log(source)\r\n    // console.log(`isPPT:${isPPT}`)\r\n    // hljs.initHighlightingOnLoad();\r\n    \r\n    \r\n    // let offCanvas = document.querySelector('#offCanvas')\r\n    // if(!offCanvas){\r\n    //     offCanvas=document.createElement('div');\r\n    //     offCanvas.setAttribute('id','offCanvas');\r\n    //     document.body.appendChild(offCanvas);\r\n    // }\r\n    \r\n      const markdown = new MarkdownIt({\r\n        html: true,\r\n        xhtmlOut: false,\r\n        breaks: false,\r\n        langPrefix: \"language-\",\r\n        linkify: true,\r\n        typographer: false,\r\n        quotes: \"“”‘’\",\r\n      })\r\n      .use(require('markdown-it-anchor').default)\r\n      .use(require(\"markdown-it-table-of-contents\"),{includeLevel:[1,2,3,4]})\r\n      .use(require('markdown-it-emoji'),{shortcuts:{\r\n      \"smile\":[\":)\",\":-)\"],\r\n      \"laughing\":\":D\" ,\r\n      \":sweat_smile:\":\"CNM\",\r\n    }})\r\n      //.use(require('@ispicyfish/markdown-it-mermaid'))\r\n      //.use(require('@liradb2000/markdown-it-mermaid'))\r\n    //   .use(require('markdown-it-graphviz'))\r\n      .use(require('markdown-it-highlightjs'))\r\n      .use(require('markdown-it-mathjax3'),{tex: {\r\n        inlineMath: [\r\n          [\"$\", \"$\"],\r\n          [\"\\\\\\\\(\", \"\\\\\\\\)\"],\r\n          [\"$$\", \"$$\"]\r\n        ],\r\n        displayMath: [\r\n          [\"$$\", \"$$\"],\r\n          [\"\\\\\\\\[\", \"\\\\\\\\]\"]\r\n        ],\r\n        processEscapes: true\r\n      }})\r\n      .use(require('markdown-it-revealjs'))\r\n\r\n      if(hasToc){\r\n        source = \"\\n[[toc]]\\n\\n\"+source\r\n      }\r\n      if(isPPT){\r\n          console.log('isPPT')\r\n          markdown.enable('revealjs')\r\n      }else{\r\n          console.log('isPDF')\r\n          markdown.disable('revealjs')\r\n      }\r\n\r\n      const ele = useRef(null);\r\n  \r\n      console.log('before render')\r\n      let html = markdown.render(source||\"\")\r\n      console.log('after render')\r\n      useEffect(()=>{\r\n        let offcanvas = document.querySelector('#offcanvas');\r\n        if (!offcanvas){\r\n          offcanvas = document.createElement('div');\r\n          offcanvas.setAttribute('id', 'offcanvas');\r\n          document.body.appendChild(offcanvas);\r\n        }\r\n        ele.current.querySelectorAll(\".language-mermaid\").forEach(($el, idx) => {\r\n          mermaid.mermaidAPI.render(\r\n            `chart-${idx}`,\r\n            $el.textContent,\r\n            (svgCode) => {\r\n              $el.innerHTML = svgCode;\r\n            },\r\n            offcanvas\r\n          );\r\n        });\r\n        if(isPPT){\r\n          let Reveal = require('reveal.js').default\r\n          console.log(Reveal)\r\n          let deck = new Reveal({\r\n              // plugins: [ Markdown ]\r\n          })\r\n          deck.initialize();\r\n        }\r\n      },[isPPT,ele])\r\n    \r\n    return  <div className={`markdownrender-container ${isPPT?'':'markdown'}`} dangerouslySetInnerHTML={{__html:html}} ref={ele}></div>\r\n\r\n}\r\n","import React from 'react';\r\nimport {graphql} from 'gatsby';\r\nimport './blogTemplate.css'\r\nimport MarkdownStaticRender from '../../components/MarkdownStaticRender/MarkdownStaticRender';\r\nimport Navbar from '../../components/Navbar/Navbar'\r\nimport Img from 'gatsby-image'\r\nexport default function BlogTemplate({data}) {\r\n  if(data.markdownRemark.frontmatter.bg===undefined||data.markdownRemark.frontmatter.bg===null){\r\n    data.markdownRemark.frontmatter.bg=data.defaultImg\r\n  }\r\n    function changeState($el,state){\r\n      if($el===null){\r\n        console.log(state)\r\n      }\r\n      let classes = $el.className.split(' ')\r\n      if(classes.includes(state)){\r\n          classes.splice(classes.indexOf(state),1)\r\n      }else{\r\n          classes.push(state)\r\n      }\r\n      $el.className=classes.join(\" \")\r\n  }\r\n  console.log(data.markdownRemark.frontmatter.title)\r\n    return (\r\n      <div className='blogtemplate-container'>\r\n          <Navbar/>\r\n          <div className='blogtemplate-banner'>\r\n            <Img\r\n              className='blogtemplate-img'\r\n              fluid={data.markdownRemark.frontmatter.bg.childImageSharp.fluid}\r\n            />\r\n          </div>\r\n          <div className='blogtemplate-body'>\r\n            <div className='blogtemplate-content'>\r\n              <div className='blogtemplate-head'>\r\n                <h1>{data.markdownRemark.frontmatter.title}</h1>\r\n                <p>{data.markdownRemark.frontmatter.description}</p>\r\n                <span>{data.markdownRemark.frontmatter.date}</span>\r\n              </div>\r\n              <div className='blogtemplate-md'>\r\n                <MarkdownStaticRender source={data.markdownRemark.rawMarkdownBody} hasToc={true}/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='blogtemplate-button'\r\n              onClick={()=>{\r\n                changeState(\r\n                  document.querySelector('.table-of-contents'),\r\n                  'table-of-contents-state0')\r\n                changeState(\r\n                  document.querySelector('.blogtemplate-button-img'),\r\n                  'blogtemplate-button-img-state0')\r\n                changeState(\r\n                  document.querySelector('.blogtemplate-button'),\r\n                  'blogtemplate-button-state0')\r\n                changeState(\r\n                  document.querySelector('.blogtemplate-content'),\r\n                  'blogtemplate-content-state0')\r\n                changeState(\r\n                  document.querySelector('.blogtemplate-body'),\r\n                  'blogtemplate-body-state0')\r\n              }}\r\n              >\r\n                <div className='blogtemplate-button-img'></div>\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport const data = graphql`\r\nquery blogTemplate($fileAbsolutePath: String) {\r\n    markdownRemark(fileAbsolutePath: {eq: $fileAbsolutePath}) {\r\n      rawMarkdownBody\r\n      frontmatter {\r\n        date(formatString: \"YYYY-MM-DD\")\r\n        description\r\n        title\r\n        bg{\r\n            childImageSharp {\r\n                fluid {\r\n                    ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n        }\r\n      }\r\n    }\r\n    defaultImg:file(relativePath: {eq: \"6.jpg\"}) {\r\n      childImageSharp {\r\n        fluid{\r\n            ...GatsbyImageSharpFluid\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"names":["MarkdownRender","source","hasToc","isPPT","markdown","isStatic","MarkdownIt","html","xhtmlOut","breaks","langPrefix","linkify","typographer","quotes","use","require","includeLevel","shortcuts","tex","inlineMath","displayMath","processEscapes","console","log","enable","disable","ele","useRef","render","useEffect","offcanvas","document","querySelector","createElement","setAttribute","body","appendChild","current","querySelectorAll","forEach","$el","idx","mermaid","textContent","svgCode","innerHTML","Reveal","initialize","className","dangerouslySetInnerHTML","__html","ref","startOnLoad","BlogTemplate","data","changeState","state","classes","split","includes","splice","indexOf","push","join","undefined","markdownRemark","frontmatter","bg","defaultImg","title","fluid","childImageSharp","description","date","rawMarkdownBody","onClick"],"sourceRoot":""}