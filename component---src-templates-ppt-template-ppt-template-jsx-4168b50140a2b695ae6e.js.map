{"version":3,"file":"component---src-templates-ppt-template-ppt-template-jsx-4168b50140a2b695ae6e.js","mappings":"uOAiCe,SAASA,EAAT,GAAgD,IAAvBC,EAAsB,EAAtBA,OAAOC,EAAe,EAAfA,OAAOC,EAAQ,EAARA,MAa1CC,EAAW,IAAIC,IAAJ,CAAe,CAC9BC,MAAM,EACNC,UAAU,EACVC,QAAQ,EACRC,WAAY,YACZC,SAAS,EACTC,aAAa,EACbC,OAAQ,SAETC,IAAIC,EAAAA,OAAAA,GACJD,IAAIC,EAAQ,OAAiC,CAACC,aAAa,CAAC,EAAE,EAAE,EAAE,KAClEF,IAAIC,EAAQ,MAAqB,CAACE,UAAU,CAC7C,MAAQ,CAAC,KAAK,OACd,SAAW,KACX,gBAAgB,SAKfH,IAAIC,EAAQ,QACZD,IAAIC,EAAQ,OAAwB,CAACG,IAAK,CACzCC,WAAY,CACV,CAAC,IAAK,KACN,CAAC,QAAS,SACV,CAAC,KAAM,OAETC,YAAa,CACX,CAAC,KAAM,MACP,CAAC,QAAS,UAEZC,gBAAgB,KAEjBP,IAAIC,EAAQ,QAEVZ,IACDD,EAAS,gBAAgBA,GAExBE,GACCkB,QAAQC,IAAI,SACZlB,EAASmB,OAAO,cAEhBF,QAAQC,IAAI,SACZlB,EAASoB,QAAQ,aAGrB,IAAMC,GAAMC,EAAAA,EAAAA,QAAO,MAEnBL,QAAQC,IAAI,iBACZ,IAAIhB,EAAOF,EAASuB,OAAO1B,GAAQ,IA8BrC,OA7BEoB,QAAQC,IAAI,iBAGZM,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAYC,SAASC,cAAc,OAIvC,GAHAF,EAAUG,aAAa,KAAM,aAC7BF,SAASG,KAAKC,YAAYL,GAC1BA,EAAYC,SAASK,cAAc,cAChChC,EAAM,CACP,IAAIiC,EAAStB,EAAAA,OAAAA,EACbO,QAAQC,IAAIc,GACD,IAAIA,EAAO,IAGjBC,kBAELZ,EAAIa,QAAQC,iBAAiB,qBAAqBC,SAAQ,SAACC,EAAKC,GAC9DC,EAAAA,EAAAA,WAAAA,OAAA,SACWD,EACTD,EAAIG,aACJ,SAACC,GACCJ,EAAIK,UAAYD,IAElBhB,QAIN,CAAC1B,EAAMsB,IAEH,uBAAKsB,UAAS,6BAA8B5C,EAAM,GAAG,YAAc6C,wBAAyB,CAACC,OAAO3C,GAAO4C,IAAKzB,IA9G5HkB,EAAAA,EAAAA,WAAmB,CAAEQ,aAAa,K,wGCLnB,SAASC,EAAT,GAA8B,IAARC,EAAO,EAAPA,KACnC,OAAQ,uBAAKN,UAAU,yBACnB,gBAAC,IAAD,MACA,gBAAC,IAAD,CAAsB9C,OAAQoD,EAAKC,eAAeC,gBAAiBpD,OAAO","sources":["webpack://gatsby-starter-hello-world/./src/components/MarkdownStaticRender/MarkdownStaticRender.jsx","webpack://gatsby-starter-hello-world/./src/templates/PPTTemplate/PPTTemplate.jsx"],"sourcesContent":["import React,{useEffect,useRef,useState} from 'react';\r\nimport './markdownStaticRender.css';\r\nimport '../../styles/markdownStyle.css';\r\n// import 'github-markdown-css/github-markdown.css'\r\n// import '../../styles/mathjaxConfig.css';\r\n// import './mathjax-config';\r\nimport \"mathjax/es5/tex-svg\";\r\n// import mermaid from 'mermaid';\r\nimport MarkdownIt from 'markdown-it';\r\nimport 'highlight.js/styles/docco.css'\r\nimport 'reveal.js/dist/reveal.css';\r\nimport 'reveal.js/dist/theme/black.css';\r\nimport mermaid from \"mermaid\";\r\n\r\nmermaid.initialize({ startOnLoad: true });\r\n// import 'katex/dist/katex.min.css'\r\n\r\n// import Markdown from 'reveal.js/plugin/markdown/markdown.esm.js';\r\n/*\r\n    support \r\n        mathjax(latex)  yes\r\n        mermaid         yes\r\n        code-highlight  yes\r\n        emoj            yes\r\n        ppt             yes\r\n*/\r\n\r\n// mermaid.initialize({startOnLoad:true});\r\n\r\n\r\n\r\n\r\n\r\nexport default function MarkdownRender({source,hasToc,isPPT}) {\r\n    // console.log(source)\r\n    // console.log(`isPPT:${isPPT}`)\r\n    // hljs.initHighlightingOnLoad();\r\n    \r\n    \r\n    // let offCanvas = document.querySelector('#offCanvas')\r\n    // if(!offCanvas){\r\n    //     offCanvas=document.createElement('div');\r\n    //     offCanvas.setAttribute('id','offCanvas');\r\n    //     document.body.appendChild(offCanvas);\r\n    // }\r\n    \r\n      const markdown = new MarkdownIt({\r\n        html: true,\r\n        xhtmlOut: false,\r\n        breaks: false,\r\n        langPrefix: \"language-\",\r\n        linkify: true,\r\n        typographer: false,\r\n        quotes: \"“”‘’\",\r\n      })\r\n      .use(require('markdown-it-anchor').default)\r\n      .use(require(\"markdown-it-table-of-contents\"),{includeLevel:[1,2,3,4]})\r\n      .use(require('markdown-it-emoji'),{shortcuts:{\r\n      \"smile\":[\":)\",\":-)\"],\r\n      \"laughing\":\":D\" ,\r\n      \":sweat_smile:\":\"CNM\",\r\n    }})\r\n      //.use(require('@ispicyfish/markdown-it-mermaid'))\r\n      //.use(require('@liradb2000/markdown-it-mermaid'))\r\n    //   .use(require('markdown-it-graphviz'))\r\n      .use(require('markdown-it-highlightjs'))\r\n      .use(require('markdown-it-mathjax3'),{tex: {\r\n        inlineMath: [\r\n          [\"$\", \"$\"],\r\n          [\"\\\\\\\\(\", \"\\\\\\\\)\"],\r\n          [\"$$\", \"$$\"]\r\n        ],\r\n        displayMath: [\r\n          [\"$$\", \"$$\"],\r\n          [\"\\\\\\\\[\", \"\\\\\\\\]\"]\r\n        ],\r\n        processEscapes: true\r\n      }})\r\n      .use(require('markdown-it-revealjs'))\r\n\r\n      if(hasToc){\r\n        source = \"\\n[[toc]]\\n\\n\"+source\r\n      }\r\n      if(isPPT){\r\n          console.log('isPPT')\r\n          markdown.enable('revealjs')\r\n      }else{\r\n          console.log('isPDF')\r\n          markdown.disable('revealjs')\r\n      }\r\n\r\n      const ele = useRef(null);\r\n  \r\n      console.log('before render')\r\n      let html = markdown.render(source||\"\")\r\n      console.log('after render')\r\n\r\n\r\n      useEffect(()=>{\r\n        let offcanvas = document.createElement('div');\r\n        offcanvas.setAttribute('id', 'offcanvas');\r\n        document.body.appendChild(offcanvas);\r\n        offcanvas = document.querySelector('#offcanvas');\r\n        if(isPPT){\r\n          let Reveal = require('reveal.js').default\r\n          console.log(Reveal)\r\n          let deck = new Reveal({\r\n              // plugins: [ Markdown ]\r\n          })\r\n          deck.initialize();\r\n        }else{\r\n          ele.current.querySelectorAll(\".language-mermaid\").forEach(($el, idx) => {\r\n            mermaid.mermaidAPI.render(\r\n              `chart-${idx}`,\r\n              $el.textContent,\r\n              (svgCode) => {\r\n                $el.innerHTML = svgCode;\r\n              },\r\n              offcanvas\r\n            );\r\n          });\r\n        }\r\n      },[isPPT,ele])\r\n    \r\n    return  <div className={`markdownrender-container ${isPPT?'':'markdown'}`} dangerouslySetInnerHTML={{__html:html}} ref={ele}></div>\r\n\r\n}\r\n","import React from 'react';\r\nimport {graphql} from 'gatsby'\r\nimport './pptTemplate.css';\r\nimport Navbar from '../../components/Navbar/Navbar'\r\n\r\nimport MarkdownStaticRender from '../../components/MarkdownStaticRender/MarkdownStaticRender'\r\n\r\n\r\n\r\nexport default function PPTTemplate({data}) {\r\n  return (<div className='ppttemplate-container'>\r\n      <Navbar/>\r\n      <MarkdownStaticRender source={data.markdownRemark.rawMarkdownBody} isPPT={true}/>\r\n  </div>);\r\n}\r\nexport const data = graphql`\r\nquery PPTTemplate($fileAbsolutePath: String) {\r\n    markdownRemark(fileAbsolutePath: {eq: $fileAbsolutePath}) {\r\n      rawMarkdownBody\r\n      frontmatter {\r\n        date(formatString: \"YYYY-MM-DD\")\r\n        description\r\n        title\r\n      }\r\n    }\r\n  }\r\n`"],"names":["MarkdownRender","source","hasToc","isPPT","markdown","MarkdownIt","html","xhtmlOut","breaks","langPrefix","linkify","typographer","quotes","use","require","includeLevel","shortcuts","tex","inlineMath","displayMath","processEscapes","console","log","enable","disable","ele","useRef","render","useEffect","offcanvas","document","createElement","setAttribute","body","appendChild","querySelector","Reveal","initialize","current","querySelectorAll","forEach","$el","idx","mermaid","textContent","svgCode","innerHTML","className","dangerouslySetInnerHTML","__html","ref","startOnLoad","PPTTemplate","data","markdownRemark","rawMarkdownBody"],"sourceRoot":""}