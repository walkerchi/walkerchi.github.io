{"version":3,"file":"3424-3d981ab54161c97d9622.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/postiats/postiats.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"], [\"<\", \">\"]],\n  autoClosingPairs: [{\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"{\",\n    close: \"}\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"[\",\n    close: \"]\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"(\",\n    close: \")\",\n    notIn: [\"string\", \"comment\"]\n  }]\n};\nvar language = {\n  tokenPostfix: \".pats\",\n  defaultToken: \"invalid\",\n  keywords: [\"abstype\", \"abst0ype\", \"absprop\", \"absview\", \"absvtype\", \"absviewtype\", \"absvt0ype\", \"absviewt0ype\", \"as\", \"and\", \"assume\", \"begin\", \"classdec\", \"datasort\", \"datatype\", \"dataprop\", \"dataview\", \"datavtype\", \"dataviewtype\", \"do\", \"end\", \"extern\", \"extype\", \"extvar\", \"exception\", \"fn\", \"fnx\", \"fun\", \"prfn\", \"prfun\", \"praxi\", \"castfn\", \"if\", \"then\", \"else\", \"ifcase\", \"in\", \"infix\", \"infixl\", \"infixr\", \"prefix\", \"postfix\", \"implmnt\", \"implement\", \"primplmnt\", \"primplement\", \"import\", \"let\", \"local\", \"macdef\", \"macrodef\", \"nonfix\", \"symelim\", \"symintr\", \"overload\", \"of\", \"op\", \"rec\", \"sif\", \"scase\", \"sortdef\", \"sta\", \"stacst\", \"stadef\", \"static\", \"staload\", \"dynload\", \"try\", \"tkindef\", \"typedef\", \"propdef\", \"viewdef\", \"vtypedef\", \"viewtypedef\", \"prval\", \"var\", \"prvar\", \"when\", \"where\", \"with\", \"withtype\", \"withprop\", \"withview\", \"withvtype\", \"withviewtype\"],\n  keywords_dlr: [\"$delay\", \"$ldelay\", \"$arrpsz\", \"$arrptrsize\", \"$d2ctype\", \"$effmask\", \"$effmask_ntm\", \"$effmask_exn\", \"$effmask_ref\", \"$effmask_wrt\", \"$effmask_all\", \"$extern\", \"$extkind\", \"$extype\", \"$extype_struct\", \"$extval\", \"$extfcall\", \"$extmcall\", \"$literal\", \"$myfilename\", \"$mylocation\", \"$myfunction\", \"$lst\", \"$lst_t\", \"$lst_vt\", \"$list\", \"$list_t\", \"$list_vt\", \"$rec\", \"$rec_t\", \"$rec_vt\", \"$record\", \"$record_t\", \"$record_vt\", \"$tup\", \"$tup_t\", \"$tup_vt\", \"$tuple\", \"$tuple_t\", \"$tuple_vt\", \"$break\", \"$continue\", \"$raise\", \"$showtype\", \"$vcopyenv_v\", \"$vcopyenv_vt\", \"$tempenver\", \"$solver_assert\", \"$solver_verify\"],\n  keywords_srp: [\"#if\", \"#ifdef\", \"#ifndef\", \"#then\", \"#elif\", \"#elifdef\", \"#elifndef\", \"#else\", \"#endif\", \"#error\", \"#prerr\", \"#print\", \"#assert\", \"#undef\", \"#define\", \"#include\", \"#require\", \"#pragma\", \"#codegen2\", \"#codegen3\"],\n  irregular_keyword_list: [\"val+\", \"val-\", \"val\", \"case+\", \"case-\", \"case\", \"addr@\", \"addr\", \"fold@\", \"free@\", \"fix@\", \"fix\", \"lam@\", \"lam\", \"llam@\", \"llam\", \"viewt@ype+\", \"viewt@ype-\", \"viewt@ype\", \"viewtype+\", \"viewtype-\", \"viewtype\", \"view+\", \"view-\", \"view@\", \"view\", \"type+\", \"type-\", \"type\", \"vtype+\", \"vtype-\", \"vtype\", \"vt@ype+\", \"vt@ype-\", \"vt@ype\", \"viewt@ype+\", \"viewt@ype-\", \"viewt@ype\", \"viewtype+\", \"viewtype-\", \"viewtype\", \"prop+\", \"prop-\", \"prop\", \"type+\", \"type-\", \"type\", \"t@ype\", \"t@ype+\", \"t@ype-\", \"abst@ype\", \"abstype\", \"absviewt@ype\", \"absvt@ype\", \"for*\", \"for\", \"while*\", \"while\"],\n  keywords_types: [\"bool\", \"double\", \"byte\", \"int\", \"short\", \"char\", \"void\", \"unit\", \"long\", \"float\", \"string\", \"strptr\"],\n  keywords_effects: [\"0\", \"fun\", \"clo\", \"prf\", \"funclo\", \"cloptr\", \"cloref\", \"ref\", \"ntm\", \"1\"],\n  operators: [\"@\", \"!\", \"|\", \"`\", \":\", \"$\", \".\", \"=\", \"#\", \"~\", \"..\", \"...\", \"=>\", \"=<>\", \"=/=>\", \"=>>\", \"=/=>>\", \"<\", \">\", \"><\", \".<\", \">.\", \".<>.\", \"->\", \"-<>\"],\n  brackets: [{\n    open: \",(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"`(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"%(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"'(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"'{\",\n    close: \"}\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"@(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"@{\",\n    close: \"}\",\n    token: \"delimiter.brace\"\n  }, {\n    open: \"@[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"#[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  IDENTFST: /[a-zA-Z_]/,\n  IDENTRST: /[a-zA-Z0-9_'$]/,\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n  digit: /[0-9]/,\n  digitseq0: /@digit*/,\n  xdigit: /[0-9A-Za-z]/,\n  xdigitseq0: /@xdigit*/,\n  INTSP: /[lLuU]/,\n  FLOATSP: /[fFlL]/,\n  fexponent: /[eE][+-]?[0-9]+/,\n  fexponent_bin: /[pP][+-]?[0-9]+/,\n  deciexp: /\\.[0-9]*@fexponent?/,\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n  start: \"root\",\n  tokenizer: {\n    root: [{\n      regex: /[ \\t\\r\\n]+/,\n      action: {\n        token: \"\"\n      }\n    }, {\n      regex: /\\(\\*\\)/,\n      action: {\n        token: \"invalid\"\n      }\n    }, {\n      regex: /\\(\\*/,\n      action: {\n        token: \"comment\",\n        next: \"lexing_COMMENT_block_ml\"\n      }\n    }, {\n      regex: /\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\)/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\[/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\]/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\{/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\}/,\n      action: \"@brackets\"\n    }, {\n      regex: /,\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /,/,\n      action: {\n        token: \"delimiter.comma\"\n      }\n    }, {\n      regex: /;/,\n      action: {\n        token: \"delimiter.semicolon\"\n      }\n    }, {\n      regex: /@\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /@\\[/,\n      action: \"@brackets\"\n    }, {\n      regex: /@\\{/,\n      action: \"@brackets\"\n    }, {\n      regex: /:</,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EFFECT_commaseq0\"\n      }\n    }, {\n      regex: /\\.@symbolic+/,\n      action: {\n        token: \"identifier.sym\"\n      }\n    }, {\n      regex: /\\.@digit*@fexponent@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /\\.@digit+/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /\\$@IDENTFST@IDENTRST*/,\n      action: {\n        cases: {\n          \"@keywords_dlr\": {\n            token: \"keyword.dlr\"\n          },\n          \"@default\": {\n            token: \"namespace\"\n          }\n        }\n      }\n    }, {\n      regex: /\\#@IDENTFST@IDENTRST*/,\n      action: {\n        cases: {\n          \"@keywords_srp\": {\n            token: \"keyword.srp\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: /%\\(/,\n      action: {\n        token: \"delimiter.parenthesis\"\n      }\n    }, {\n      regex: /^%{(#|\\^|\\$)?/,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EXTCODE\",\n        nextEmbedded: \"text/javascript\"\n      }\n    }, {\n      regex: /^%}/,\n      action: {\n        token: \"keyword\"\n      }\n    }, {\n      regex: /'\\(/,\n      action: {\n        token: \"delimiter.parenthesis\"\n      }\n    }, {\n      regex: /'\\[/,\n      action: {\n        token: \"delimiter.bracket\"\n      }\n    }, {\n      regex: /'\\{/,\n      action: {\n        token: \"delimiter.brace\"\n      }\n    }, [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]], [/'[^\\\\']'/, \"string\"], [/\"/, \"string.quote\", \"@lexing_DQUOTE\"], {\n      regex: /`\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\\\/,\n      action: {\n        token: \"punctuation\"\n      }\n    }, {\n      regex: /@irregular_keywords(?!@IDENTRST)/,\n      action: {\n        token: \"keyword\"\n      }\n    }, {\n      regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n      action: {\n        cases: {\n          \"@keywords\": {\n            token: \"keyword\"\n          },\n          \"@keywords_types\": {\n            token: \"type\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: /\\/\\/\\/\\//,\n      action: {\n        token: \"comment\",\n        next: \"@lexing_COMMENT_rest\"\n      }\n    }, {\n      regex: /\\/\\/.*$/,\n      action: {\n        token: \"comment\"\n      }\n    }, {\n      regex: /\\/\\*/,\n      action: {\n        token: \"comment\",\n        next: \"@lexing_COMMENT_block_c\"\n      }\n    }, {\n      regex: /-<|=</,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EFFECT_commaseq0\"\n      }\n    }, {\n      regex: /@symbolic+/,\n      action: {\n        cases: {\n          \"@operators\": \"keyword\",\n          \"@default\": \"operator\"\n        }\n      }\n    }, {\n      regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /0[xX]@xdigit+@INTSP*/,\n      action: {\n        token: \"number.hex\"\n      }\n    }, {\n      regex: /0[0-7]+(?![0-9])@INTSP*/,\n      action: {\n        token: \"number.octal\"\n      }\n    }, {\n      regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /@digit@digitseq0@INTSP*/,\n      action: {\n        token: \"number.decimal\"\n      }\n    }, {\n      regex: /@digit+@INTSP*/,\n      action: {\n        token: \"number\"\n      }\n    }],\n    lexing_COMMENT_block_ml: [[/[^\\(\\*]+/, \"comment\"], [/\\(\\*/, \"comment\", \"@push\"], [/\\(\\*/, \"comment.invalid\"], [/\\*\\)/, \"comment\", \"@pop\"], [/\\*/, \"comment\"]],\n    lexing_COMMENT_block_c: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    lexing_COMMENT_rest: [[/$/, \"comment\", \"@pop\"], [/.*/, \"comment\"]],\n    lexing_EFFECT_commaseq0: [{\n      regex: /@IDENTFST@IDENTRST+|@digit+/,\n      action: {\n        cases: {\n          \"@keywords_effects\": {\n            token: \"type.effect\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: /,/,\n      action: {\n        token: \"punctuation\"\n      }\n    }, {\n      regex: />/,\n      action: {\n        token: \"@rematch\",\n        next: \"@pop\"\n      }\n    }],\n    lexing_EXTCODE: [{\n      regex: /^%}/,\n      action: {\n        token: \"@rematch\",\n        next: \"@pop\",\n        nextEmbedded: \"@pop\"\n      }\n    }, {\n      regex: /[^%]+/,\n      action: \"\"\n    }],\n    lexing_DQUOTE: [{\n      regex: /\"/,\n      action: {\n        token: \"string.quote\",\n        next: \"@pop\"\n      }\n    }, {\n      regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n      action: [{\n        token: \"string.escape\"\n      }, {\n        token: \"identifier\"\n      }, {\n        token: \"string.escape\"\n      }]\n    }, {\n      regex: /\\\\$/,\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: /[^\\\\\"]+/,\n      action: {\n        token: \"string\"\n      }\n    }]\n  }\n};\nexport { conf, language };"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","language","tokenPostfix","defaultToken","keywords","keywords_dlr","keywords_srp","irregular_keyword_list","keywords_types","keywords_effects","operators","token","symbols","IDENTFST","IDENTRST","symbolic","digit","digitseq0","xdigit","xdigitseq0","INTSP","FLOATSP","fexponent","fexponent_bin","deciexp","hexiexp","irregular_keywords","ESCHAR","start","tokenizer","root","regex","action","next","cases","nextEmbedded","lexing_COMMENT_block_ml","lexing_COMMENT_block_c","lexing_COMMENT_rest","lexing_EFFECT_commaseq0","lexing_EXTCODE","lexing_DQUOTE"],"sourceRoot":""}