{"version":3,"file":"2038-386de95768119f5869a5.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./node_modules/monaco-editor/esm/vs/basic-languages/julia/julia.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/julia/julia.ts\nvar conf = {\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }]\n};\nvar language = {\n  tokenPostfix: \".julia\",\n  keywords: [\"begin\", \"while\", \"if\", \"for\", \"try\", \"return\", \"break\", \"continue\", \"function\", \"macro\", \"quote\", \"let\", \"local\", \"global\", \"const\", \"do\", \"struct\", \"module\", \"baremodule\", \"using\", \"import\", \"export\", \"end\", \"else\", \"elseif\", \"catch\", \"finally\", \"mutable\", \"primitive\", \"abstract\", \"type\", \"in\", \"isa\", \"where\", \"new\"],\n  types: [\"LinRange\", \"LineNumberNode\", \"LinearIndices\", \"LoadError\", \"MIME\", \"Matrix\", \"Method\", \"MethodError\", \"Missing\", \"MissingException\", \"Module\", \"NTuple\", \"NamedTuple\", \"Nothing\", \"Number\", \"OrdinalRange\", \"OutOfMemoryError\", \"OverflowError\", \"Pair\", \"PartialQuickSort\", \"PermutedDimsArray\", \"Pipe\", \"Ptr\", \"QuoteNode\", \"Rational\", \"RawFD\", \"ReadOnlyMemoryError\", \"Real\", \"ReentrantLock\", \"Ref\", \"Regex\", \"RegexMatch\", \"RoundingMode\", \"SegmentationFault\", \"Set\", \"Signed\", \"Some\", \"StackOverflowError\", \"StepRange\", \"StepRangeLen\", \"StridedArray\", \"StridedMatrix\", \"StridedVecOrMat\", \"StridedVector\", \"String\", \"StringIndexError\", \"SubArray\", \"SubString\", \"SubstitutionString\", \"Symbol\", \"SystemError\", \"Task\", \"Text\", \"TextDisplay\", \"Timer\", \"Tuple\", \"Type\", \"TypeError\", \"TypeVar\", \"UInt\", \"UInt128\", \"UInt16\", \"UInt32\", \"UInt64\", \"UInt8\", \"UndefInitializer\", \"AbstractArray\", \"UndefKeywordError\", \"AbstractChannel\", \"UndefRefError\", \"AbstractChar\", \"UndefVarError\", \"AbstractDict\", \"Union\", \"AbstractDisplay\", \"UnionAll\", \"AbstractFloat\", \"UnitRange\", \"AbstractIrrational\", \"Unsigned\", \"AbstractMatrix\", \"AbstractRange\", \"Val\", \"AbstractSet\", \"Vararg\", \"AbstractString\", \"VecElement\", \"AbstractUnitRange\", \"VecOrMat\", \"AbstractVecOrMat\", \"Vector\", \"AbstractVector\", \"VersionNumber\", \"Any\", \"WeakKeyDict\", \"ArgumentError\", \"WeakRef\", \"Array\", \"AssertionError\", \"BigFloat\", \"BigInt\", \"BitArray\", \"BitMatrix\", \"BitSet\", \"BitVector\", \"Bool\", \"BoundsError\", \"CapturedException\", \"CartesianIndex\", \"CartesianIndices\", \"Cchar\", \"Cdouble\", \"Cfloat\", \"Channel\", \"Char\", \"Cint\", \"Cintmax_t\", \"Clong\", \"Clonglong\", \"Cmd\", \"Colon\", \"Complex\", \"ComplexF16\", \"ComplexF32\", \"ComplexF64\", \"CompositeException\", \"Condition\", \"Cptrdiff_t\", \"Cshort\", \"Csize_t\", \"Cssize_t\", \"Cstring\", \"Cuchar\", \"Cuint\", \"Cuintmax_t\", \"Culong\", \"Culonglong\", \"Cushort\", \"Cvoid\", \"Cwchar_t\", \"Cwstring\", \"DataType\", \"DenseArray\", \"DenseMatrix\", \"DenseVecOrMat\", \"DenseVector\", \"Dict\", \"DimensionMismatch\", \"Dims\", \"DivideError\", \"DomainError\", \"EOFError\", \"Enum\", \"ErrorException\", \"Exception\", \"ExponentialBackOff\", \"Expr\", \"Float16\", \"Float32\", \"Float64\", \"Function\", \"GlobalRef\", \"HTML\", \"IO\", \"IOBuffer\", \"IOContext\", \"IOStream\", \"IdDict\", \"IndexCartesian\", \"IndexLinear\", \"IndexStyle\", \"InexactError\", \"InitError\", \"Int\", \"Int128\", \"Int16\", \"Int32\", \"Int64\", \"Int8\", \"Integer\", \"InterruptException\", \"InvalidStateException\", \"Irrational\", \"KeyError\"],\n  keywordops: [\"<:\", \">:\", \":\", \"=>\", \"...\", \".\", \"->\", \"?\"],\n  allops: /[^\\w\\d\\s()\\[\\]{}\"'#]+/,\n  constants: [\"true\", \"false\", \"nothing\", \"missing\", \"undef\", \"Inf\", \"pi\", \"NaN\", \"\\u03C0\", \"\\u212F\", \"ans\", \"PROGRAM_FILE\", \"ARGS\", \"C_NULL\", \"VERSION\", \"DEPOT_PATH\", \"LOAD_PATH\"],\n  operators: [\"!\", \"!=\", \"!==\", \"%\", \"&\", \"*\", \"+\", \"-\", \"/\", \"//\", \"<\", \"<<\", \"<=\", \"==\", \"===\", \"=>\", \">\", \">=\", \">>\", \">>>\", \"\\\\\", \"^\", \"|\", \"|>\", \"~\", \"\\xF7\", \"\\u2208\", \"\\u2209\", \"\\u220B\", \"\\u220C\", \"\\u2218\", \"\\u221A\", \"\\u221B\", \"\\u2229\", \"\\u222A\", \"\\u2248\", \"\\u2249\", \"\\u2260\", \"\\u2261\", \"\\u2262\", \"\\u2264\", \"\\u2265\", \"\\u2286\", \"\\u2287\", \"\\u2288\", \"\\u2289\", \"\\u228A\", \"\\u228B\", \"\\u22BB\"],\n  brackets: [{\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }],\n  ident: /π|ℯ|\\b(?!\\d)\\w+\\b/,\n  escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n  tokenizer: {\n    root: [[/(::)\\s*|\\b(isa)\\s+/, \"keyword\", \"@typeanno\"], [/\\b(isa)(\\s*\\(@ident\\s*,\\s*)/, [\"keyword\", {\n      token: \"\",\n      next: \"@typeanno\"\n    }]], [/\\b(type|struct)[ \\t]+/, \"keyword\", \"@typeanno\"], [/^\\s*:@ident[!?]?/, \"metatag\"], [/(return)(\\s*:@ident[!?]?)/, [\"keyword\", \"metatag\"]], [/(\\(|\\[|\\{|@allops)(\\s*:@ident[!?]?)/, [\"\", \"metatag\"]], [/:\\(/, \"metatag\", \"@quote\"], [/r\"\"\"/, \"regexp.delim\", \"@tregexp\"], [/r\"/, \"regexp.delim\", \"@sregexp\"], [/raw\"\"\"/, \"string.delim\", \"@rtstring\"], [/[bv]?\"\"\"/, \"string.delim\", \"@dtstring\"], [/raw\"/, \"string.delim\", \"@rsstring\"], [/[bv]?\"/, \"string.delim\", \"@dsstring\"], [/(@ident)\\{/, {\n      cases: {\n        \"$1@types\": {\n          token: \"type\",\n          next: \"@gen\"\n        },\n        \"@default\": {\n          token: \"type\",\n          next: \"@gen\"\n        }\n      }\n    }], [/@ident[!?'']?(?=\\.?\\()/, {\n      cases: {\n        \"@types\": \"type\",\n        \"@keywords\": \"keyword\",\n        \"@constants\": \"variable\",\n        \"@default\": \"keyword.flow\"\n      }\n    }], [/@ident[!?']?/, {\n      cases: {\n        \"@types\": \"type\",\n        \"@keywords\": \"keyword\",\n        \"@constants\": \"variable\",\n        \"@default\": \"identifier\"\n      }\n    }], [/\\$\\w+/, \"key\"], [/\\$\\(/, \"key\", \"@paste\"], [/@@@ident/, \"annotation\"], {\n      include: \"@whitespace\"\n    }, [/'(?:@escapes|.)'/, \"string.character\"], [/[()\\[\\]{}]/, \"@brackets\"], [/@allops/, {\n      cases: {\n        \"@keywordops\": \"keyword\",\n        \"@operators\": \"operator\"\n      }\n    }], [/[;,]/, \"delimiter\"], [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, \"number.hex\"], [/0[_oO][0-7](_?[0-7])*/, \"number.octal\"], [/0[bB][01](_?[01])*/, \"number.binary\"], [/[+\\-]?\\d+(\\.\\d+)?(im?|[eE][+\\-]?\\d+(\\.\\d+)?)?/, \"number\"]],\n    typeanno: [[/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*\\{/, \"type\", \"@gen\"], [/([a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*)(\\s*<:\\s*)/, [\"type\", \"keyword\"]], [/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*/, \"type\", \"@pop\"], [\"\", \"\", \"@pop\"]],\n    gen: [[/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*\\{/, \"type\", \"@push\"], [/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*/, \"type\"], [/<:/, \"keyword\"], [/(\\})(\\s*<:\\s*)/, [\"type\", {\n      token: \"keyword\",\n      next: \"@pop\"\n    }]], [/\\}/, \"type\", \"@pop\"], {\n      include: \"@root\"\n    }],\n    quote: [[/\\$\\(/, \"key\", \"@paste\"], [/\\(/, \"@brackets\", \"@paren\"], [/\\)/, \"metatag\", \"@pop\"], {\n      include: \"@root\"\n    }],\n    paste: [[/:\\(/, \"metatag\", \"@quote\"], [/\\(/, \"@brackets\", \"@paren\"], [/\\)/, \"key\", \"@pop\"], {\n      include: \"@root\"\n    }],\n    paren: [[/\\$\\(/, \"key\", \"@paste\"], [/:\\(/, \"metatag\", \"@quote\"], [/\\(/, \"@brackets\", \"@push\"], [/\\)/, \"@brackets\", \"@pop\"], {\n      include: \"@root\"\n    }],\n    sregexp: [[/^.*/, \"invalid\"], [/[^\\\\\"()\\[\\]{}]/, \"regexp\"], [/[()\\[\\]{}]/, \"@brackets\"], [/\\\\./, \"operator.scss\"], [/\"[imsx]*/, \"regexp.delim\", \"@pop\"]],\n    tregexp: [[/[^\\\\\"()\\[\\]{}]/, \"regexp\"], [/[()\\[\\]{}]/, \"@brackets\"], [/\\\\./, \"operator.scss\"], [/\"(?!\"\")/, \"string\"], [/\"\"\"[imsx]*/, \"regexp.delim\", \"@pop\"]],\n    rsstring: [[/^.*/, \"invalid\"], [/[^\\\\\"]/, \"string\"], [/\\\\./, \"string.escape\"], [/\"/, \"string.delim\", \"@pop\"]],\n    rtstring: [[/[^\\\\\"]/, \"string\"], [/\\\\./, \"string.escape\"], [/\"(?!\"\")/, \"string\"], [/\"\"\"/, \"string.delim\", \"@pop\"]],\n    dsstring: [[/^.*/, \"invalid\"], [/[^\\\\\"\\$]/, \"string\"], [/\\$/, \"\", \"@interpolated\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string.delim\", \"@pop\"]],\n    dtstring: [[/[^\\\\\"\\$]/, \"string\"], [/\\$/, \"\", \"@interpolated\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"(?!\"\")/, \"string\"], [/\"\"\"/, \"string.delim\", \"@pop\"]],\n    interpolated: [[/\\(/, {\n      token: \"\",\n      switchTo: \"@interpolated_compound\"\n    }], [/[a-zA-Z_]\\w*/, \"identifier\"], [\"\", \"\", \"@pop\"]],\n    interpolated_compound: [[/\\)/, \"\", \"@pop\"], {\n      include: \"@root\"\n    }],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/#=/, \"comment\", \"@multi_comment\"], [/#.*$/, \"comment\"]],\n    multi_comment: [[/#=/, \"comment\", \"@push\"], [/=#/, \"comment\", \"@pop\"], [/=(?!#)|#(?!=)/, \"comment\"], [/[^#=]+/, \"comment\"]]\n  }\n};\nexport { conf, language };"],"names":["conf","brackets","autoClosingPairs","open","close","surroundingPairs","language","tokenPostfix","keywords","types","keywordops","allops","constants","operators","token","ident","escape","escapes","tokenizer","root","next","cases","include","typeanno","gen","quote","paste","paren","sregexp","tregexp","rsstring","rtstring","dsstring","dtstring","interpolated","switchTo","interpolated_compound","whitespace","multi_comment"],"sourceRoot":""}