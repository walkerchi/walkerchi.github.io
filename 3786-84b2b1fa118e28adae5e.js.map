{"version":3,"file":"3786-84b2b1fa118e28adae5e.js","mappings":";uNAOA,IAAIA,EAAO,CACTC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEvBC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MACrDC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,OAETC,iBAAkB,CAAC,CACjBF,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,QAGPE,EAAW,CACbC,aAAc,GACdC,aAAc,YACdC,YAAY,EACZR,SAAU,CAAC,CACTE,KAAM,IACNC,MAAO,IACPM,MAAO,mBACN,CACDP,KAAM,IACNC,MAAO,IACPM,MAAO,oBACN,CACDP,KAAM,IACNC,MAAO,IACPM,MAAO,yBACN,CACDP,KAAM,IACNC,MAAO,IACPM,MAAO,oBAETC,SAAU,CAAC,MAAO,SAAU,QAAS,QAAS,OAAQ,SAAU,UAAW,OAAQ,WAAY,QAAS,MAAO,MAAO,KAAM,KAAM,MAAO,YAAa,WAAY,OAAQ,OAAQ,MAAO,MAAO,QAAS,YAAa,MAAO,MAAO,YAAa,YAAa,KAAM,SAAU,MAAO,MAAO,SAAU,OAAQ,SAAU,SAAU,OAAQ,KAAM,OAAQ,OAAQ,QAChWC,aAAc,CAAC,MAAO,OAAQ,SAAU,KAAM,MAAO,QACrDC,UAAW,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,MAAO,MAAO,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,MACtIC,QAAS,wBACTC,UAAW,CACTC,KAAM,CAAC,CAAC,iBAAkB,CACxBC,MAAO,CACL,YAAa,CACXP,MAAO,cAET,WAAY,gBAEZ,CACFQ,QAAS,eACR,CAAC,aAAc,aAAc,CAAC,mBAAoB,aAAc,CAAC,WAAY,CAC9ED,MAAO,CACL,aAAc,YACd,WAAY,MAEZ,CAAC,2BAA4B,gBAAiB,CAAC,sBAAuB,cAAe,CAAC,MAAO,UAAW,CAAC,QAAS,aAAc,CAAC,kBAAmB,kBAAmB,CAAC,IAAK,SAAU,WAAY,CAAC,WAAY,UAAW,CAAC,IAAK,kBAAmB,CAAC,QAAS,WAClQE,QAAS,CAAC,CAAC,WAAY,WAAY,CAAC,OAAQ,UAAW,QAAS,CAAC,OAAQ,YACzEC,OAAQ,CAAC,CAAC,UAAW,UAAW,CAAC,MAAO,yBAA0B,CAAC,IAAK,CACtEV,MAAO,eACPW,QAAS,SACTC,KAAM,UAERC,WAAY,CAAC,CAAC,aAAc,SAAU,CAAC,OAAQ,UAAW,YAAa,CAAC,UAAW","sources":["webpack://gatsby-starter-hello-world/./node_modules/monaco-editor/esm/vs/basic-languages/cameligo/cameligo.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/cameligo/cameligo.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"], [\"<\", \">\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"(*\",\n    close: \"*)\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"(*\",\n    close: \"*)\"\n  }]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".cameligo\",\n  ignoreCase: true,\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  keywords: [\"abs\", \"assert\", \"block\", \"Bytes\", \"case\", \"Crypto\", \"Current\", \"else\", \"failwith\", \"false\", \"for\", \"fun\", \"if\", \"in\", \"let\", \"let%entry\", \"let%init\", \"List\", \"list\", \"Map\", \"map\", \"match\", \"match%nat\", \"mod\", \"not\", \"operation\", \"Operation\", \"of\", \"record\", \"Set\", \"set\", \"sender\", \"skip\", \"source\", \"String\", \"then\", \"to\", \"true\", \"type\", \"with\"],\n  typeKeywords: [\"int\", \"unit\", \"string\", \"tz\", \"nat\", \"bool\"],\n  operators: [\"=\", \">\", \"<\", \"<=\", \">=\", \"<>\", \":\", \":=\", \"and\", \"mod\", \"or\", \"+\", \"-\", \"*\", \"/\", \"@\", \"&\", \"^\", \"%\", \"->\", \"<-\", \"&&\", \"||\"],\n  symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n  tokenizer: {\n    root: [[/[a-zA-Z_][\\w]*/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@whitespace\"\n    }, [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/\\$[0-9a-fA-F]{1,16}/, \"number.hex\"], [/\\d+/, \"number\"], [/[;,.]/, \"delimiter\"], [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"], [/'/, \"string\", \"@string\"], [/'[^\\\\']'/, \"string\"], [/'/, \"string.invalid\"], [/\\#\\d+/, \"string\"]],\n    comment: [[/[^\\(\\*]+/, \"comment\"], [/\\*\\)/, \"comment\", \"@pop\"], [/\\(\\*/, \"comment\"]],\n    string: [[/[^\\\\']+/, \"string\"], [/\\\\./, \"string.escape.invalid\"], [/'/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/\\(\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]]\n  }\n};\nexport { conf, language };"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","include","comment","string","bracket","next","whitespace"],"sourceRoot":""}