{"version":3,"file":"6441-e0d62be21572c85fba33.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./node_modules/monaco-editor/esm/vs/basic-languages/pascal/pascal.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/pascal/pascal.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"{\", \"}\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"], [\"<\", \">\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*\\\\{\\\\$REGION(\\\\s\\\\'.*\\\\')?\\\\}\"),\n      end: new RegExp(\"^\\\\s*\\\\{\\\\$ENDREGION\\\\}\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".pascal\",\n  ignoreCase: true,\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  keywords: [\"absolute\", \"abstract\", \"all\", \"and_then\", \"array\", \"as\", \"asm\", \"attribute\", \"begin\", \"bindable\", \"case\", \"class\", \"const\", \"contains\", \"default\", \"div\", \"else\", \"end\", \"except\", \"exports\", \"external\", \"far\", \"file\", \"finalization\", \"finally\", \"forward\", \"generic\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"index\", \"inherited\", \"initialization\", \"interrupt\", \"is\", \"label\", \"library\", \"mod\", \"module\", \"name\", \"near\", \"not\", \"object\", \"of\", \"on\", \"only\", \"operator\", \"or_else\", \"otherwise\", \"override\", \"package\", \"packed\", \"pow\", \"private\", \"program\", \"protected\", \"public\", \"published\", \"interface\", \"implementation\", \"qualified\", \"read\", \"record\", \"resident\", \"requires\", \"resourcestring\", \"restricted\", \"segment\", \"set\", \"shl\", \"shr\", \"specialize\", \"stored\", \"strict\", \"then\", \"threadvar\", \"to\", \"try\", \"type\", \"unit\", \"uses\", \"var\", \"view\", \"virtual\", \"dynamic\", \"overload\", \"reintroduce\", \"with\", \"write\", \"xor\", \"true\", \"false\", \"procedure\", \"function\", \"constructor\", \"destructor\", \"property\", \"break\", \"continue\", \"exit\", \"abort\", \"while\", \"do\", \"for\", \"raise\", \"repeat\", \"until\"],\n  typeKeywords: [\"boolean\", \"double\", \"byte\", \"integer\", \"shortint\", \"char\", \"longint\", \"float\", \"string\"],\n  operators: [\"=\", \">\", \"<\", \"<=\", \">=\", \"<>\", \":\", \":=\", \"and\", \"or\", \"+\", \"-\", \"*\", \"/\", \"@\", \"&\", \"^\", \"%\"],\n  symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n  tokenizer: {\n    root: [[/[a-zA-Z_][\\w]*/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@whitespace\"\n    }, [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/\\$[0-9a-fA-F]{1,16}/, \"number.hex\"], [/\\d+/, \"number\"], [/[;,.]/, \"delimiter\"], [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"], [/'/, \"string\", \"@string\"], [/'[^\\\\']'/, \"string\"], [/'/, \"string.invalid\"], [/\\#\\d+/, \"string\"]],\n    comment: [[/[^\\*\\}]+/, \"comment\"], [/\\}/, \"comment\", \"@pop\"], [/[\\{]/, \"comment\"]],\n    string: [[/[^\\\\']+/, \"string\"], [/\\\\./, \"string.escape.invalid\"], [/'/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/\\{/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]]\n  }\n};\nexport { conf, language };"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","include","comment","string","bracket","next","whitespace"],"sourceRoot":""}