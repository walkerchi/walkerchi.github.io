{"version":3,"file":"5570-16718f3f93ba17bba32b.js","mappings":";uNAOA,IAAIA,EAAO,CACTC,SAAU,CACRC,YAAa,WAEfC,SAAU,CAAC,CAAC,IAAK,MACjBC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,MAETC,iBAAkB,CAAC,CACjBF,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,MAETE,QAAS,CACPC,QAAS,CACPC,MAAO,IAAIC,OAAO,oCAClBC,IAAK,IAAID,OAAO,0CAIlBE,EAAW,CACbC,aAAc,SACdC,YAAY,EACZC,SAAU,CAAC,QAAS,MAAO,SAAU,QAAS,YAAa,MAAO,MAAO,OAAQ,WAAY,OAAQ,MACrGC,aAAc,CAAC,SAAU,SAAU,MAAO,OAAQ,OAAQ,QAAS,QACnEC,UAAW,CAAC,OAAQ,UAAW,QAAS,KAAM,KAAM,KAAM,MAAO,MAAO,QAAS,WAAY,aAAc,WAAY,aAAc,QAAS,SAAU,UAAW,KAAM,KAAM,aAC/KC,QAAS,wBACTC,UAAW,CACTC,KAAM,CAAC,CAAC,8BAA+B,CAAC,GAAI,YAAa,CAAC,IAAK,CAC7DC,MAAO,mBACPC,QAAS,QACTC,KAAM,uBACJ,CAAC,OAAQ,CACXF,MAAO,UACPC,QAAS,QACTC,KAAM,6BACJ,CAAC,QAAS,CACZF,MAAO,UACPC,QAAS,QACTC,KAAM,YACJ,CAAC,IAAK,CACRF,MAAO,YACPC,QAAS,QACTC,KAAM,6BACJ,CAAC,gBAAiB,CACpBC,MAAO,CACL,aAAc,WACd,gBAAiB,eACjB,YAAa,UACb,WAAY,gBAEZ,CACFC,QAAS,eACR,CAAC,aAAc,aAAc,CAAC,mBAAoB,aAAc,CAAC,WAAY,aAAc,CAAC,gBAAiB,iBAAkB,CAAC,2BAA4B,gBAAiB,CAAC,oBAAqB,cAAe,CAAC,MAAO,UAAW,CAAC,QAAS,cAClPC,kBAAmB,CAAC,CAAC,UAAW,cAAe,CAAC,IAAK,CACnDL,MAAO,mBACPC,QAAS,SACTC,KAAM,UAERI,8BAA+B,CAAC,CAAC,IAAK,aAAc,CAAC,IAAK,CACxDN,MAAO,QACPE,KAAM,sBAERK,wBAAyB,CAAC,CACxBH,QAAS,eACR,CAAC,IAAK,CACPJ,MAAO,YACPE,KAAM,qBACJ,CAAC,UAAW,cAAe,CAAC,KAAM,CACpCF,MAAO,YACPC,QAAS,SACTC,KAAM,UAERM,gBAAiB,CAAC,CAAC,UAAW,cAAe,CAAC,KAAM,CAClDR,MAAO,YACPC,QAAS,SACTC,KAAM,UAERO,OAAQ,CAAC,CACPL,QAAS,eACR,CAAC,IAAK,aAAc,CAAC,gBAAiB,CACvCJ,MAAO,gBACPC,QAAS,SACTC,KAAM,UAERQ,WAAY,CAAC,CAAC,aAAc","sources":["webpack://gatsby-starter-hello-world/./node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \":\",\n    close: \".\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"`\",\n    close: \"`\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \":\",\n    close: \".\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\"lexon\", \"lex\", \"clause\", \"terms\", \"contracts\", \"may\", \"pay\", \"pays\", \"appoints\", \"into\", \"to\"],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\"less\", \"greater\", \"equal\", \"le\", \"gt\", \"or\", \"and\", \"add\", \"added\", \"subtract\", \"subtracted\", \"multiply\", \"multiplied\", \"times\", \"divide\", \"divided\", \"is\", \"be\", \"certified\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  tokenizer: {\n    root: [[/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]], [/\"/, {\n      token: \"identifier.quote\",\n      bracket: \"@open\",\n      next: \"@quoted_identifier\"\n    }], [\"LEX$\", {\n      token: \"keyword\",\n      bracket: \"@open\",\n      next: \"@identifier_until_period\"\n    }], [\"LEXON\", {\n      token: \"keyword\",\n      bracket: \"@open\",\n      next: \"@semver\"\n    }], [\":\", {\n      token: \"delimiter\",\n      bracket: \"@open\",\n      next: \"@identifier_until_period\"\n    }], [/[a-z_$][\\w$]*/, {\n      cases: {\n        \"@operators\": \"operator\",\n        \"@typeKeywords\": \"keyword.type\",\n        \"@keywords\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@whitespace\"\n    }, [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, \"delimiter\"], [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/0[xX][0-9a-fA-F]+/, \"number.hex\"], [/\\d+/, \"number\"], [/[;,.]/, \"delimiter\"]],\n    quoted_identifier: [[/[^\\\\\"]+/, \"identifier\"], [/\"/, {\n      token: \"identifier.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    space_identifier_until_period: [[\":\", \"delimiter\"], [\" \", {\n      token: \"white\",\n      next: \"@identifier_rest\"\n    }]],\n    identifier_until_period: [{\n      include: \"@whitespace\"\n    }, [\":\", {\n      token: \"delimiter\",\n      next: \"@identifier_rest\"\n    }], [/[^\\\\.]+/, \"identifier\"], [/\\./, {\n      token: \"delimiter\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    identifier_rest: [[/[^\\\\.]+/, \"identifier\"], [/\\./, {\n      token: \"delimiter\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    semver: [{\n      include: \"@whitespace\"\n    }, [\":\", \"delimiter\"], [/\\d*\\.\\d*\\.\\d*/, {\n      token: \"number.semver\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport { conf, language };"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","tokenPostfix","ignoreCase","keywords","typeKeywords","operators","symbols","tokenizer","root","token","bracket","next","cases","include","quoted_identifier","space_identifier_until_period","identifier_until_period","identifier_rest","semver","whitespace"],"sourceRoot":""}